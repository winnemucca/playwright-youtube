{"ast":null,"code":"import * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, HostListener, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, Self, HostBinding, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\n\nconst _c0 = [\"mat-menu-item\", \"\"];\n\nfunction MatMenuItem__svg_svg_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"polygon\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c1 = [\"*\"];\n\nfunction MatMenu_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵlistener(\"keydown\", function MatMenu_ng_template_0_Template_div_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._handleKeydown($event));\n    })(\"click\", function MatMenu_ng_template_0_Template_div_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.closed.emit(\"click\"));\n    })(\"@transformMenu.start\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_start_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4._onAnimationStart($event));\n    })(\"@transformMenu.done\", function MatMenu_ng_template_0_Template_div_animation_transformMenu_done_0_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5._onAnimationDone($event));\n    });\n    i0.ɵɵelementStart(1, \"div\", 1);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"id\", ctx_r0.panelId)(\"ngClass\", ctx_r0._classList)(\"@transformMenu\", ctx_r0._panelAnimationState);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0.ariaLabelledby || null)(\"aria-describedby\", ctx_r0.ariaDescribedby || null);\n  }\n}\n\nconst matMenuAnimations = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [state('void', style({\n    opacity: 0,\n    transform: 'scale(0.8)'\n  })), transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n    opacity: 1,\n    transform: 'scale(1)'\n  }))), transition('* => void', animate('100ms 25ms linear', style({\n    opacity: 0\n  })))]),\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [// TODO(crisbeto): this is inside the `transformMenu`\n  // now. Remove next time we do breaking changes.\n  state('showing', style({\n    opacity: 1\n  })), transition('void => *', [style({\n    opacity: 0\n  }), animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')])])\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\n\nconst transformMenu = matMenuAnimations.transformMenu;\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n\nclass _MatMenuContentBase {\n  constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n    this._template = _template;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._injector = _injector;\n    this._viewContainerRef = _viewContainerRef;\n    this._document = _document;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Emits when the menu content has been attached. */\n\n    this._attached = new Subject();\n  }\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n\n\n  attach(context = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element = this._template.elementRef.nativeElement; // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n\n    element.parentNode.insertBefore(this._outlet.outletElement, element); // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n    // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n    // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n    // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n    // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n    // @breaking-change 9.0.0 Make change detector ref required\n\n    if (this._changeDetectorRef) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._portal.attach(this._outlet, context);\n\n    this._attached.next();\n  }\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n\n\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n\n}\n\n_MatMenuContentBase.ɵfac = function _MatMenuContentBase_Factory(t) {\n  return new (t || _MatMenuContentBase)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ComponentFactoryResolver), i0.ɵɵdirectiveInject(i0.ApplicationRef), i0.ɵɵdirectiveInject(i0.Injector), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\n_MatMenuContentBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuContentBase\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuContentBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.TemplateRef\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: i0.Injector\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n\n\nclass MatMenuContent extends _MatMenuContentBase {}\n\nMatMenuContent.ɵfac = /* @__PURE__ */function () {\n  let ɵMatMenuContent_BaseFactory;\n  return function MatMenuContent_Factory(t) {\n    return (ɵMatMenuContent_BaseFactory || (ɵMatMenuContent_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuContent)))(t || MatMenuContent);\n  };\n}();\n\nMatMenuContent.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatMenuContent,\n  selectors: [[\"ng-template\", \"matMenuContent\", \"\"]],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_CONTENT,\n    useExisting: MatMenuContent\n  }]), i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuContent, [{\n    type: Directive,\n    args: [{\n      selector: 'ng-template[matMenuContent]',\n      providers: [{\n        provide: MAT_MENU_CONTENT,\n        useExisting: MatMenuContent\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\n\n\nfunction throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\n\n\nfunction throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\n\n\nfunction throwMatMenuRecursiveError() {\n  throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` + `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\n\n\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n\n/** @docs-private */\n\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\n\n\nclass MatMenuItem extends _MatMenuItemBase {\n  constructor(_elementRef,\n  /**\n   * @deprecated `_document` parameter is no longer being used and will be removed.\n   * @breaking-change 12.0.0\n   */\n  _document, _focusMonitor, _parentMenu,\n  /**\n   * @deprecated `_changeDetectorRef` to become a required parameter.\n   * @breaking-change 14.0.0\n   */\n  _changeDetectorRef) {\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n    this._elementRef = _elementRef;\n    this._focusMonitor = _focusMonitor;\n    this._parentMenu = _parentMenu;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** ARIA role for the menu item. */\n\n    this.role = 'menuitem';\n    /** Stream that emits when the menu item is hovered. */\n\n    this._hovered = new Subject();\n    /** Stream that emits when the menu item is focused. */\n\n    this._focused = new Subject();\n    /** Whether the menu item is highlighted. */\n\n    this._highlighted = false;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n\n    this._triggersSubmenu = false;\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n  }\n  /** Focuses the menu item. */\n\n\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n    } else {\n      this._getHostElement().focus(options);\n    }\n\n    this._focused.next(this);\n  }\n\n  ngAfterViewInit() {\n    if (this._focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      this._focusMonitor.monitor(this._elementRef, false);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n\n    this._focused.complete();\n  }\n  /** Used to set the `tabindex`. */\n\n\n  _getTabIndex() {\n    return this.disabled ? '-1' : '0';\n  }\n  /** Returns the host DOM element. */\n\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n  /** Prevents the default element actions if it is disabled. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n  _checkDisabled(event) {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n  /** Emits to the hover stream. */\n  // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n  // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n  // ViewEngine they're overwritten.\n  // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n  // tslint:disable-next-line:no-host-decorator-in-concrete\n\n\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n  /** Gets the label to be used when determining whether the option should be focused. */\n\n\n  getLabel() {\n    const clone = this._elementRef.nativeElement.cloneNode(true);\n\n    const icons = clone.querySelectorAll('mat-icon, .material-icons'); // Strip away icons so they don't show up in the text.\n\n    for (let i = 0; i < icons.length; i++) {\n      icons[i].remove();\n    }\n\n    return clone.textContent?.trim() || '';\n  }\n\n  _setHighlighted(isHighlighted) {\n    // We need to mark this for check for the case where the content is coming from a\n    // `matMenuContent` whose change detection tree is at the declaration position,\n    // not the insertion position. See #23175.\n    // @breaking-change 14.0.0 Remove null check for `_changeDetectorRef`.\n    this._highlighted = isHighlighted;\n    this._changeDetectorRef?.markForCheck();\n  }\n\n}\n\nMatMenuItem.ɵfac = function MatMenuItem_Factory(t) {\n  return new (t || MatMenuItem)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(i1.FocusMonitor), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\n\nMatMenuItem.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatMenuItem,\n  selectors: [[\"\", \"mat-menu-item\", \"\"]],\n  hostAttrs: [1, \"mat-focus-indicator\"],\n  hostVars: 10,\n  hostBindings: function MatMenuItem_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatMenuItem_click_HostBindingHandler($event) {\n        return ctx._checkDisabled($event);\n      })(\"mouseenter\", function MatMenuItem_mouseenter_HostBindingHandler() {\n        return ctx._handleMouseEnter();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx._getTabIndex())(\"aria-disabled\", ctx.disabled.toString())(\"disabled\", ctx.disabled || null);\n      i0.ɵɵclassProp(\"mat-menu-item\", true)(\"mat-menu-item-highlighted\", ctx._highlighted)(\"mat-menu-item-submenu-trigger\", ctx._triggersSubmenu);\n    }\n  },\n  inputs: {\n    disabled: \"disabled\",\n    disableRipple: \"disableRipple\",\n    role: \"role\"\n  },\n  exportAs: [\"matMenuItem\"],\n  features: [i0.ɵɵInheritDefinitionFeature],\n  attrs: _c0,\n  ngContentSelectors: _c1,\n  decls: 3,\n  vars: 3,\n  consts: [[\"matRipple\", \"\", 1, \"mat-menu-ripple\", 3, \"matRippleDisabled\", \"matRippleTrigger\"], [\"class\", \"mat-menu-submenu-icon\", \"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 4, \"ngIf\"], [\"viewBox\", \"0 0 5 10\", \"focusable\", \"false\", 1, \"mat-menu-submenu-icon\"], [\"points\", \"0,0 5,5 0,10\"]],\n  template: function MatMenuItem_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵprojection(0);\n      i0.ɵɵelement(1, \"div\", 0);\n      i0.ɵɵtemplate(2, MatMenuItem__svg_svg_2_Template, 2, 0, \"svg\", 1);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleTrigger\", ctx._getHostElement());\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx._triggersSubmenu);\n    }\n  },\n  dependencies: [i2.MatRipple, i3.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuItem, [{\n    type: Component,\n    args: [{\n      selector: '[mat-menu-item]',\n      exportAs: 'matMenuItem',\n      inputs: ['disabled', 'disableRipple'],\n      host: {\n        '[attr.role]': 'role',\n        '[class.mat-menu-item]': 'true',\n        '[class.mat-menu-item-highlighted]': '_highlighted',\n        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n        '[attr.tabindex]': '_getTabIndex()',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.disabled]': 'disabled || null',\n        'class': 'mat-focus-indicator'\n      },\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\"\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    role: [{\n      type: Input\n    }],\n    _checkDisabled: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }],\n    _handleMouseEnter: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for `mat-menu`. */\n\n\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n  providedIn: 'root',\n  factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\n\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop'\n  };\n}\n\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\n\nclass _MatMenuBase {\n  constructor(_elementRef, _ngZone, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._ngZone = _ngZone;\n    this._defaultOptions = _defaultOptions;\n    this._xPosition = this._defaultOptions.xPosition;\n    this._yPosition = this._defaultOptions.yPosition;\n    /** Only the direct descendant menu items. */\n\n    this._directDescendantItems = new QueryList();\n    /** Subscription to tab events on the menu panel */\n\n    this._tabSubscription = Subscription.EMPTY;\n    /** Config object to be passed into the menu's ngClass */\n\n    this._classList = {};\n    /** Current state of the panel animation. */\n\n    this._panelAnimationState = 'void';\n    /** Emits whenever an animation on the menu completes. */\n\n    this._animationDone = new Subject();\n    /** Class or list of classes to be added to the overlay panel. */\n\n    this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n    /** Class to be added to the backdrop element. */\n\n    this.backdropClass = this._defaultOptions.backdropClass;\n    this._overlapTrigger = this._defaultOptions.overlapTrigger;\n    this._hasBackdrop = this._defaultOptions.hasBackdrop;\n    /** Event emitted when the menu is closed. */\n\n    this.closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n\n    this.close = this.closed;\n    this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n  }\n  /** Position of the menu in the X axis. */\n\n\n  get xPosition() {\n    return this._xPosition;\n  }\n\n  set xPosition(value) {\n    if (value !== 'before' && value !== 'after' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionX();\n    }\n\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n  /** Position of the menu in the Y axis. */\n\n\n  get yPosition() {\n    return this._yPosition;\n  }\n\n  set yPosition(value) {\n    if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuInvalidPositionY();\n    }\n\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n  /** Whether the menu should overlap its trigger. */\n\n\n  get overlapTrigger() {\n    return this._overlapTrigger;\n  }\n\n  set overlapTrigger(value) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  /** Whether the menu has a backdrop. */\n\n\n  get hasBackdrop() {\n    return this._hasBackdrop;\n  }\n\n  set hasBackdrop(value) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n\n\n  set panelClass(classes) {\n    const previousPanelClass = this._previousPanelClass;\n\n    if (previousPanelClass && previousPanelClass.length) {\n      previousPanelClass.split(' ').forEach(className => {\n        this._classList[className] = false;\n      });\n    }\n\n    this._previousPanelClass = classes;\n\n    if (classes && classes.length) {\n      classes.split(' ').forEach(className => {\n        this._classList[className] = true;\n      });\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n\n\n  get classList() {\n    return this.panelClass;\n  }\n\n  set classList(classes) {\n    this.panelClass = classes;\n  }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._updateDirectDescendants();\n\n    this._keyManager = new FocusKeyManager(this._directDescendantItems).withWrap().withTypeAhead().withHomeAndEnd();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab')); // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n    // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n    // is internal and we know that it gets completed on destroy.\n\n    this._directDescendantItems.changes.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._focused)))).subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n  }\n\n  ngOnDestroy() {\n    this._directDescendantItems.destroy();\n\n    this._tabSubscription.unsubscribe();\n\n    this.closed.complete();\n  }\n  /** Stream that emits whenever the hovered menu item changes. */\n\n\n  _hovered() {\n    // Coerce the `changes` property because Angular types it as `Observable<any>`\n    const itemChanges = this._directDescendantItems.changes;\n    return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map(item => item._hovered))));\n  }\n  /*\n   * Registers a menu item with the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n\n\n  addItem(_item) {}\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   * @deprecated No longer being used. To be removed.\n   * @breaking-change 9.0.0\n   */\n\n\n  removeItem(_item) {}\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n\n\n  _handleKeydown(event) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n\n    switch (keyCode) {\n      case ESCAPE:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this.closed.emit('keydown');\n        }\n\n        break;\n\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n\n        break;\n\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n\n        break;\n\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          manager.setFocusOrigin('keyboard');\n        }\n\n        manager.onKeydown(event);\n    }\n  }\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n\n\n  focusFirstItem(origin = 'program') {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this._focusFirstItem(origin));\n    } else {\n      this._focusFirstItem(origin);\n    }\n  }\n  /**\n   * Actual implementation that focuses the first item. Needs to be separated\n   * out so we don't repeat the same logic in the public `focusFirstItem` method.\n   */\n\n\n  _focusFirstItem(origin) {\n    const manager = this._keyManager;\n    manager.setFocusOrigin(origin).setFirstItemActive(); // If there's no active item at this point, it means that all the items are disabled.\n    // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n    // give _some_ feedback to screen readers.\n\n    if (!manager.activeItem && this._directDescendantItems.length) {\n      let element = this._directDescendantItems.first._getHostElement().parentElement; // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n      // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n      // because the panel is inside an `ng-template`. We work around it by starting from one of\n      // the items and walking up the DOM.\n\n\n      while (element) {\n        if (element.getAttribute('role') === 'menu') {\n          element.focus();\n          break;\n        } else {\n          element = element.parentElement;\n        }\n      }\n    }\n  }\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n\n\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n\n\n  setElevation(depth) {\n    // The elevation starts at the base and increases by one for each level.\n    // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n    const elevation = Math.min(this._baseElevation + depth, 24);\n    const newElevation = `${this._elevationPrefix}${elevation}`;\n    const customElevation = Object.keys(this._classList).find(className => {\n      return className.startsWith(this._elevationPrefix);\n    });\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n\n\n  setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n  /** Starts the enter animation. */\n\n\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n  /** Resets the panel animation to its initial state. */\n\n\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n  /** Callback that is invoked when the panel animation completes. */\n\n\n  _onAnimationDone(event) {\n    this._animationDone.next(event);\n\n    this._isAnimating = false;\n  }\n\n  _onAnimationStart(event) {\n    this._isAnimating = true; // Scroll the content element to the top as soon as the animation starts. This is necessary,\n    // because we move focus to the first item while it's still being animated, which can throw\n    // the browser off when it determines the scroll position. Alternatively we can move focus\n    // when the animation is done, however moving focus asynchronously will interrupt screen\n    // readers which are in the process of reading out the menu already. We take the `element`\n    // from the `event` since we can't use a `ViewChild` to access the pane.\n\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n  /**\n   * Sets up a stream that will keep track of any newly-added menu items and will update the list\n   * of direct descendants. We collect the descendants this way, because `_allItems` can include\n   * items that are part of child menus, and using a custom way of registering items is unreliable\n   * when it comes to maintaining the item order.\n   */\n\n\n  _updateDirectDescendants() {\n    this._allItems.changes.pipe(startWith(this._allItems)).subscribe(items => {\n      this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n\n      this._directDescendantItems.notifyOnChanges();\n    });\n  }\n\n}\n\n_MatMenuBase.ɵfac = function _MatMenuBase_Factory(t) {\n  return new (t || _MatMenuBase)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n};\n\n_MatMenuBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuBase,\n  contentQueries: function _MatMenuBase_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_MENU_CONTENT, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 5);\n      i0.ɵɵcontentQuery(dirIndex, MatMenuItem, 4);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.lazyContent = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._allItems = _t);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.items = _t);\n    }\n  },\n  viewQuery: function _MatMenuBase_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TemplateRef, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n    }\n  },\n  inputs: {\n    backdropClass: \"backdropClass\",\n    ariaLabel: [\"aria-label\", \"ariaLabel\"],\n    ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"],\n    ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"],\n    xPosition: \"xPosition\",\n    yPosition: \"yPosition\",\n    overlapTrigger: \"overlapTrigger\",\n    hasBackdrop: \"hasBackdrop\",\n    panelClass: [\"class\", \"panelClass\"],\n    classList: \"classList\"\n  },\n  outputs: {\n    closed: \"closed\",\n    close: \"close\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    _allItems: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: true\n      }]\n    }],\n    backdropClass: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input,\n      args: ['aria-label']\n    }],\n    ariaLabelledby: [{\n      type: Input,\n      args: ['aria-labelledby']\n    }],\n    ariaDescribedby: [{\n      type: Input,\n      args: ['aria-describedby']\n    }],\n    xPosition: [{\n      type: Input\n    }],\n    yPosition: [{\n      type: Input\n    }],\n    templateRef: [{\n      type: ViewChild,\n      args: [TemplateRef]\n    }],\n    items: [{\n      type: ContentChildren,\n      args: [MatMenuItem, {\n        descendants: false\n      }]\n    }],\n    lazyContent: [{\n      type: ContentChild,\n      args: [MAT_MENU_CONTENT]\n    }],\n    overlapTrigger: [{\n      type: Input\n    }],\n    hasBackdrop: [{\n      type: Input\n    }],\n    panelClass: [{\n      type: Input,\n      args: ['class']\n    }],\n    classList: [{\n      type: Input\n    }],\n    closed: [{\n      type: Output\n    }],\n    close: [{\n      type: Output\n    }]\n  });\n})();\n/** @docs-public MatMenu */\n\n\nclass MatMenu extends _MatMenuBase {\n  constructor(elementRef, ngZone, defaultOptions) {\n    super(elementRef, ngZone, defaultOptions);\n    this._elevationPrefix = 'mat-elevation-z';\n    this._baseElevation = 4;\n  }\n\n}\n\nMatMenu.ɵfac = function MatMenu_Factory(t) {\n  return new (t || MatMenu)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(MAT_MENU_DEFAULT_OPTIONS));\n};\n\nMatMenu.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatMenu,\n  selectors: [[\"mat-menu\"]],\n  hostVars: 3,\n  hostBindings: function MatMenu_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-label\", null)(\"aria-labelledby\", null)(\"aria-describedby\", null);\n    }\n  },\n  exportAs: [\"matMenu\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_MENU_PANEL,\n    useExisting: MatMenu\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 1,\n  vars: 0,\n  consts: [[\"tabindex\", \"-1\", \"role\", \"menu\", 1, \"mat-menu-panel\", 3, \"id\", \"ngClass\", \"keydown\", \"click\"], [1, \"mat-menu-content\"]],\n  template: function MatMenu_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵtemplate(0, MatMenu_ng_template_0_Template, 3, 6, \"ng-template\");\n    }\n  },\n  dependencies: [i3.NgClass],\n  styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"],\n  encapsulation: 2,\n  data: {\n    animation: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems]\n  },\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenu, [{\n    type: Component,\n    args: [{\n      selector: 'mat-menu',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None,\n      exportAs: 'matMenu',\n      host: {\n        '[attr.aria-label]': 'null',\n        '[attr.aria-labelledby]': 'null',\n        '[attr.aria-describedby]': 'null'\n      },\n      animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems],\n      providers: [{\n        provide: MAT_MENU_PANEL,\n        useExisting: MatMenu\n      }],\n      template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\",\n      styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token that determines the scroll handling while the menu is open. */\n\n\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\n\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n  return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\n\n\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY\n};\n/** Default top padding of the menu panel. */\n\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\n\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({\n  passive: true\n}); // TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\nclass _MatMenuTriggerBase {\n  constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n  // tslint:disable-next-line: lightweight-tokens\n  _menuItemInstance, _dir, // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n  // @breaking-change 8.0.0\n  _focusMonitor) {\n    this._overlay = _overlay;\n    this._element = _element;\n    this._viewContainerRef = _viewContainerRef;\n    this._menuItemInstance = _menuItemInstance;\n    this._dir = _dir;\n    this._focusMonitor = _focusMonitor;\n    this._overlayRef = null;\n    this._menuOpen = false;\n    this._closingActionsSubscription = Subscription.EMPTY;\n    this._hoverSubscription = Subscription.EMPTY;\n    this._menuCloseSubscription = Subscription.EMPTY;\n    /**\n     * Handles touch start events on the trigger.\n     * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n     */\n\n    this._handleTouchStart = event => {\n      if (!isFakeTouchstartFromScreenReader(event)) {\n        this._openedBy = 'touch';\n      }\n    }; // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n\n\n    this._openedBy = undefined;\n    this._ariaHaspopup = true;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n\n    this.restoreFocus = true;\n    /** Event emitted when the associated menu is opened. */\n\n    this.menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuOpen = this.menuOpened;\n    /** Event emitted when the associated menu is closed. */\n\n    this.menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n\n    this.onMenuClose = this.menuClosed;\n    this._scrollStrategy = scrollStrategy;\n    this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n  }\n\n  get _ariaExpanded() {\n    return this.menuOpen || null;\n  }\n\n  get _ariaControl() {\n    return this.menuOpen ? this.menu.panelId : null;\n  }\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n\n\n  get _deprecatedMatMenuTriggerFor() {\n    return this.menu;\n  }\n\n  set _deprecatedMatMenuTriggerFor(v) {\n    this.menu = v;\n  }\n  /** References the menu instance that the trigger is associated with. */\n\n\n  get menu() {\n    return this._menu;\n  }\n\n  set menu(menu) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throwMatMenuRecursiveError();\n      }\n\n      this._menuCloseSubscription = menu.close.subscribe(reason => {\n        this._destroyMenu(reason); // If a click closed the menu, we should close the entire chain of nested menus.\n\n\n        if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n          this._parentMaterialMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n\n    this._menuCloseSubscription.unsubscribe();\n\n    this._closingActionsSubscription.unsubscribe();\n\n    this._hoverSubscription.unsubscribe();\n  }\n  /** Whether the menu is open. */\n\n\n  get menuOpen() {\n    return this._menuOpen;\n  }\n  /** The text direction of the containing app. */\n\n\n  get dir() {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n\n\n  triggersSubmenu() {\n    return !!(this._menuItemInstance && this._parentMaterialMenu);\n  }\n  /** Toggles the menu between the open and closed states. */\n\n\n  toggleMenu() {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n  /** Opens the menu. */\n\n\n  openMenu() {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n\n    const overlayConfig = overlayRef.getConfig();\n\n    this._setPosition(overlayConfig.positionStrategy);\n\n    overlayConfig.hasBackdrop = this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n\n    this._initMenu();\n\n    if (this.menu instanceof _MatMenuBase) {\n      this.menu._startAnimation();\n    }\n  }\n  /** Closes the menu. */\n\n\n  closeMenu() {\n    this.menu.close.emit();\n  }\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n\n\n  focus(origin, options) {\n    if (this._focusMonitor && origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n  /**\n   * Updates the position of the menu to ensure that it fits all options within the viewport.\n   */\n\n\n  updatePosition() {\n    this._overlayRef?.updatePosition();\n  }\n  /** Closes the menu and does the necessary cleanup. */\n\n\n  _destroyMenu(reason) {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closingActionsSubscription.unsubscribe();\n\n    this._overlayRef.detach(); // Always restore focus if the user is navigating using the keyboard or the menu was opened\n    // programmatically. We don't restore for non-root triggers, because it can prevent focus\n    // from making it back to the root trigger when closing a long chain of menus by clicking\n    // on the backdrop.\n\n\n    if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = undefined;\n\n    if (menu instanceof _MatMenuBase) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone.pipe(filter(event => event.toState === 'void'), take(1), // Interrupt if the content got re-attached.\n        takeUntil(menu.lazyContent._attached)).subscribe({\n          next: () => menu.lazyContent.detach(),\n          // No matter whether the content got re-attached, reset the menu.\n          complete: () => this._setIsMenuOpen(false)\n        });\n      } else {\n        this._setIsMenuOpen(false);\n      }\n    } else {\n      this._setIsMenuOpen(false);\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n\n\n  _initMenu() {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n    this.menu.direction = this.dir;\n\n    this._setMenuElevation();\n\n    this.menu.focusFirstItem(this._openedBy || 'program');\n\n    this._setIsMenuOpen(true);\n  }\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n\n\n  _setMenuElevation() {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  } // set state rather than toggle to support triggers sharing a menu\n\n\n  _setIsMenuOpen(isOpen) {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._setHighlighted(isOpen);\n    }\n  }\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n\n\n  _checkMenu() {\n    if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n      throwMatMenuMissingError();\n    }\n  }\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n\n\n  _createOverlay() {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n\n      this._subscribeToPositions(config.positionStrategy);\n\n      this._overlayRef = this._overlay.create(config); // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n\n\n  _getOverlayConfig() {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position().flexibleConnectedTo(this._element).withLockedPosition().withGrowAfterOpen().withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      panelClass: this.menu.overlayPanelClass,\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n\n\n  _subscribeToPositions(position) {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n        this.menu.setPositionClasses(posX, posY);\n      });\n    }\n  }\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n\n\n  _setPosition(positionStrategy) {\n    let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n    let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([{\n      originX,\n      originY,\n      overlayX,\n      overlayY,\n      offsetY\n    }, {\n      originX: originFallbackX,\n      originY,\n      overlayX: overlayFallbackX,\n      overlayY,\n      offsetY\n    }, {\n      originX,\n      originY: originFallbackY,\n      overlayX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }, {\n      originX: originFallbackX,\n      originY: originFallbackY,\n      overlayX: overlayFallbackX,\n      overlayY: overlayFallbackY,\n      offsetY: -offsetY\n    }]);\n  }\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n\n\n  _menuClosingActions() {\n    const backdrop = this._overlayRef.backdropClick();\n\n    const detachments = this._overlayRef.detachments();\n\n    const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n    const hover = this._parentMaterialMenu ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen)) : of();\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n  /** Handles mouse presses on the trigger. */\n\n\n  _handleMousedown(event) {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : undefined; // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n  /** Handles key presses on the trigger. */\n\n\n  _handleKeydown(event) {\n    const keyCode = event.keyCode; // Pressing enter on the trigger will trigger the click handler later.\n\n    if (keyCode === ENTER || keyCode === SPACE) {\n      this._openedBy = 'keyboard';\n    }\n\n    if (this.triggersSubmenu() && (keyCode === RIGHT_ARROW && this.dir === 'ltr' || keyCode === LEFT_ARROW && this.dir === 'rtl')) {\n      this._openedBy = 'keyboard';\n      this.openMenu();\n    }\n  }\n  /** Handles click events on the trigger. */\n\n\n  _handleClick(event) {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n  /** Handles the cases where the user hovers over the trigger. */\n\n\n  _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMaterialMenu._hovered() // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n    // with different data and triggers), we have to delay it by a tick to ensure that\n    // it won't be closed immediately after it is opened.\n    .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler)).subscribe(() => {\n      this._openedBy = 'mouse'; // If the same menu is used between multiple triggers, it might still be animating\n      // while the new trigger tries to re-open it. Wait for the animation to finish\n      // before doing so. Also interrupt if the user moves to another item.\n\n      if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n        // We need the `delay(0)` here in order to avoid\n        // 'changed after checked' errors in some cases. See #12194.\n        this.menu._animationDone.pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered())).subscribe(() => this.openMenu());\n      } else {\n        this.openMenu();\n      }\n    });\n  }\n  /** Gets the portal that should be attached to the overlay. */\n\n\n  _getPortal() {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n\n_MatMenuTriggerBase.ɵfac = function _MatMenuTriggerBase_Factory(t) {\n  return new (t || _MatMenuTriggerBase)(i0.ɵɵdirectiveInject(i1$1.Overlay), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(MAT_MENU_SCROLL_STRATEGY), i0.ɵɵdirectiveInject(MAT_MENU_PANEL, 8), i0.ɵɵdirectiveInject(MatMenuItem, 10), i0.ɵɵdirectiveInject(i3$1.Directionality, 8), i0.ɵɵdirectiveInject(i1.FocusMonitor));\n};\n\n_MatMenuTriggerBase.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: _MatMenuTriggerBase,\n  hostVars: 3,\n  hostBindings: function _MatMenuTriggerBase_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"mousedown\", function _MatMenuTriggerBase_mousedown_HostBindingHandler($event) {\n        return ctx._handleMousedown($event);\n      })(\"keydown\", function _MatMenuTriggerBase_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"click\", function _MatMenuTriggerBase_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-expanded\", ctx._ariaExpanded)(\"aria-controls\", ctx._ariaControl)(\"aria-haspopup\", ctx._ariaHaspopup);\n    }\n  },\n  inputs: {\n    _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"],\n    menu: [\"matMenuTriggerFor\", \"menu\"],\n    menuData: [\"matMenuTriggerData\", \"menuData\"],\n    restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"]\n  },\n  outputs: {\n    menuOpened: \"menuOpened\",\n    onMenuOpen: \"onMenuOpen\",\n    menuClosed: \"menuClosed\",\n    onMenuClose: \"onMenuClose\"\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(_MatMenuTriggerBase, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: i1$1.Overlay\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ViewContainerRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_SCROLL_STRATEGY]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_MENU_PANEL]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: MatMenuItem,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }, {\n      type: i3$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i1.FocusMonitor\n    }];\n  }, {\n    _ariaExpanded: [{\n      type: HostBinding,\n      args: ['attr.aria-expanded']\n    }],\n    _ariaControl: [{\n      type: HostBinding,\n      args: ['attr.aria-controls']\n    }],\n    _ariaHaspopup: [{\n      type: HostBinding,\n      args: ['attr.aria-haspopup']\n    }],\n    _deprecatedMatMenuTriggerFor: [{\n      type: Input,\n      args: ['mat-menu-trigger-for']\n    }],\n    menu: [{\n      type: Input,\n      args: ['matMenuTriggerFor']\n    }],\n    menuData: [{\n      type: Input,\n      args: ['matMenuTriggerData']\n    }],\n    restoreFocus: [{\n      type: Input,\n      args: ['matMenuTriggerRestoreFocus']\n    }],\n    menuOpened: [{\n      type: Output\n    }],\n    onMenuOpen: [{\n      type: Output\n    }],\n    menuClosed: [{\n      type: Output\n    }],\n    onMenuClose: [{\n      type: Output\n    }],\n    _handleMousedown: [{\n      type: HostListener,\n      args: ['mousedown', ['$event']]\n    }],\n    _handleKeydown: [{\n      type: HostListener,\n      args: ['keydown', ['$event']]\n    }],\n    _handleClick: [{\n      type: HostListener,\n      args: ['click', ['$event']]\n    }]\n  });\n})();\n/** Directive applied to an element that should trigger a `mat-menu`. */\n\n\nclass MatMenuTrigger extends _MatMenuTriggerBase {}\n\nMatMenuTrigger.ɵfac = /* @__PURE__ */function () {\n  let ɵMatMenuTrigger_BaseFactory;\n  return function MatMenuTrigger_Factory(t) {\n    return (ɵMatMenuTrigger_BaseFactory || (ɵMatMenuTrigger_BaseFactory = i0.ɵɵgetInheritedFactory(MatMenuTrigger)))(t || MatMenuTrigger);\n  };\n}();\n\nMatMenuTrigger.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatMenuTrigger,\n  selectors: [[\"\", \"mat-menu-trigger-for\", \"\"], [\"\", \"matMenuTriggerFor\", \"\"]],\n  hostAttrs: [1, \"mat-menu-trigger\"],\n  exportAs: [\"matMenuTrigger\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuTrigger, [{\n    type: Directive,\n    args: [{\n      selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n      host: {\n        'class': 'mat-menu-trigger'\n      },\n      exportAs: 'matMenuTrigger'\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nclass MatMenuModule {}\n\nMatMenuModule.ɵfac = function MatMenuModule_Factory(t) {\n  return new (t || MatMenuModule)();\n};\n\nMatMenuModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatMenuModule\n});\nMatMenuModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n  imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule], CdkScrollableModule, MatCommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatMenuModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule],\n      exports: [CdkScrollableModule, MatCommonModule, MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n      declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n      providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };","map":{"version":3,"names":["i1","FocusKeyManager","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceBooleanProperty","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","LEFT_ARROW","ESCAPE","hasModifierKey","ENTER","SPACE","i0","InjectionToken","Directive","Inject","Component","ChangeDetectionStrategy","ViewEncapsulation","Optional","Input","HostListener","QueryList","EventEmitter","TemplateRef","ContentChildren","ViewChild","ContentChild","Output","Self","HostBinding","NgModule","Subject","Subscription","merge","of","asapScheduler","startWith","switchMap","take","filter","takeUntil","delay","trigger","state","style","transition","animate","TemplatePortal","DomPortalOutlet","i3","DOCUMENT","CommonModule","i2","mixinDisableRipple","mixinDisabled","MatCommonModule","MatRippleModule","i3$1","i1$1","Overlay","OverlayConfig","OverlayModule","normalizePassiveListenerOptions","CdkScrollableModule","matMenuAnimations","transformMenu","opacity","transform","fadeInItems","MAT_MENU_CONTENT","_MatMenuContentBase","constructor","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_changeDetectorRef","_attached","attach","context","_portal","detach","_outlet","createElement","element","elementRef","nativeElement","parentNode","insertBefore","outletElement","markForCheck","next","isAttached","ngOnDestroy","dispose","ɵfac","ComponentFactoryResolver","ApplicationRef","Injector","ViewContainerRef","ChangeDetectorRef","ɵdir","type","undefined","decorators","args","MatMenuContent","provide","useExisting","selector","providers","throwMatMenuMissingError","Error","throwMatMenuInvalidPositionX","throwMatMenuInvalidPositionY","throwMatMenuRecursiveError","MAT_MENU_PANEL","_MatMenuItemBase","MatMenuItem","_elementRef","_focusMonitor","_parentMenu","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","ngAfterViewInit","monitor","stopMonitoring","removeItem","complete","_getTabIndex","disabled","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","ElementRef","FocusMonitor","ɵcmp","MatRipple","NgIf","exportAs","inputs","host","changeDetection","OnPush","encapsulation","None","template","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","menuPanelUid","_MatMenuBase","_ngZone","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","_tabSubscription","EMPTY","_classList","_panelAnimationState","_animationDone","overlayPanelClass","_overlapTrigger","_hasBackdrop","hasBackdrop","closed","close","panelId","value","ngDevMode","setPositionClasses","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","classList","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","emit","changes","pipe","items","map","item","focusedItem","updateActiveItem","destroy","unsubscribe","itemChanges","_item","_handleKeydown","keyCode","manager","parentMenu","direction","setFocusOrigin","onKeydown","focusFirstItem","lazyContent","onStable","_focusFirstItem","setFirstItemActive","activeItem","first","parentElement","getAttribute","resetActiveItem","setActiveItem","setElevation","depth","elevation","Math","min","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","_onAnimationStart","toState","activeItemIndex","scrollTop","_allItems","reset","notifyOnChanges","NgZone","descendants","ariaLabel","ariaLabelledby","ariaDescribedby","templateRef","MatMenu","ngZone","defaultOptions","NgClass","animations","styles","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MENU_PANEL_TOP_PADDING","passiveEventListenerOptions","passive","_MatMenuTriggerBase","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","_ariaHaspopup","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","_parentMaterialMenu","addEventListener","triggersSubmenu","_ariaExpanded","menuOpen","_ariaControl","menu","_deprecatedMatMenuTriggerFor","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","_setPosition","positionStrategy","_getPortal","menuData","_menuClosingActions","_initMenu","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","position","flexibleConnectedTo","withLockedPosition","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","hover","active","_handleMousedown","button","_handleClick","Directionality","MatMenuTrigger","MatMenuModule","ɵmod","ɵinj","imports","exports","declarations"],"sources":["/Users/stevenkauyedauty/projects/codeChallenges/bookCatalog/node_modules/@angular/material/fesm2020/menu.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, HostListener, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, Self, HostBinding, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, filter, takeUntil, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        if (this._changeDetectorRef) {\n            this._changeDetectorRef.markForCheck();\n        }\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n_MatMenuContentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatMenuContentBase, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuContentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: _MatMenuContentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatMenuContentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent extends _MatMenuContentBase {\n}\nMatMenuContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuContent, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, \n    /**\n     * @deprecated `_document` parameter is no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _focusMonitor, _parentMenu, \n    /**\n     * @deprecated `_changeDetectorRef` to become a required parameter.\n     * @breaking-change 14.0.0\n     */\n    _changeDetectorRef) {\n        // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n        super();\n        this._elementRef = _elementRef;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        if (_parentMenu && _parentMenu.addItem) {\n            _parentMenu.addItem(this);\n        }\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 14.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef?.markForCheck();\n    }\n}\nMatMenuItem.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenuItem.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-menu-item\": \"true\", \"class.mat-menu-item-highlighted\": \"_highlighted\", \"class.mat-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-focus-indicator\" }, exportAs: [\"matMenuItem\"], usesInheritance: true, ngImport: i0, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\", directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', inputs: ['disabled', 'disableRipple'], host: {\n                        '[attr.role]': 'role',\n                        '[class.mat-menu-item]': 'true',\n                        '[class.mat-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.disabled]': 'disabled || null',\n                        'class': 'mat-focus-indicator',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{\n                type: Input\n            }], _checkDisabled: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], _handleMouseEnter: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Subscription to tab events on the menu panel */\n        this._tabSubscription = Subscription.EMPTY;\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n        return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n    }\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => this._focusFirstItem(origin));\n        }\n        else {\n            this._focusFirstItem(origin);\n        }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     */\n    _focusFirstItem(origin) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && this._directDescendantItems.length) {\n            let element = this._directDescendantItems.first._getHostElement().parentElement;\n            // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            while (element) {\n                if (element.getAttribute('role') === 'menu') {\n                    element.focus();\n                    break;\n                }\n                else {\n                    element = element.parentElement;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatMenuBase, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: _MatMenuBase, inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatMenuBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n    constructor(elementRef, ngZone, defaultOptions) {\n        super(elementRef, ngZone, defaultOptions);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 4;\n    }\n}\nMatMenu.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });\nMatMenu.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatMenu, selector: \"mat-menu\", host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], exportAs: [\"matMenu\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;-moz-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]{pointer-events:none}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\nclass _MatMenuTriggerBase {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, \n    // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n    // @breaking-change 8.0.0\n    _focusMonitor) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        this._ariaHaspopup = true;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n    }\n    get _ariaExpanded() {\n        return this.menuOpen || null;\n    }\n    get _ariaControl() {\n        return this.menuOpen ? this.menu.panelId : null;\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n        this._setPosition(overlayConfig.positionStrategy);\n        overlayConfig.hasBackdrop =\n            this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu();\n        if (this.menu instanceof _MatMenuBase) {\n            this.menu._startAnimation();\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this.menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            let depth = 0;\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._setHighlighted(isOpen);\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    _checkMenu() {\n        if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: this.menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                this.menu.setPositionClasses(posX, posY);\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\n_MatMenuTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatMenuTriggerBase, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3$1.Directionality, optional: true }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: _MatMenuTriggerBase, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick($event)\" }, properties: { \"attr.aria-expanded\": \"this._ariaExpanded\", \"attr.aria-controls\": \"this._ariaControl\", \"attr.aria-haspopup\": \"this._ariaHaspopup\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: _MatMenuTriggerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_SCROLL_STRATEGY]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: MatMenuItem, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i1.FocusMonitor }]; }, propDecorators: { _ariaExpanded: [{\n                type: HostBinding,\n                args: ['attr.aria-expanded']\n            }], _ariaControl: [{\n                type: HostBinding,\n                args: ['attr.aria-controls']\n            }], _ariaHaspopup: [{\n                type: HostBinding,\n                args: ['attr.aria-haspopup']\n            }], _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }], _handleMousedown: [{\n                type: HostListener,\n                args: ['mousedown', ['$event']]\n            }], _handleKeydown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], _handleClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n}\nMatMenuTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", host: { classAttribute: \"mat-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-menu-trigger',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatMenuModule {\n}\nMatMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent], imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule], exports: [CdkScrollableModule,\n        MatCommonModule,\n        MatMenu,\n        MatMenuItem,\n        MatMenuTrigger,\n        MatMenuContent] });\nMatMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule], CdkScrollableModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuTrigger,\n                        MatMenuContent,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}