{"ast":null,"code":"import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n/** Event object emitted by MatChip when selected or deselected. */\n\nconst _c0 = [\"*\"];\n\nclass MatChipSelectionChange {\n  constructor(\n  /** Reference to the chip that emitted the event. */\n  source,\n  /** Whether the chip that emitted the event is selected. */\n  selected,\n  /** Whether the selection change was a result of a user interaction. */\n  isUserInput = false) {\n    this.source = source;\n    this.selected = selected;\n    this.isUserInput = isUserInput;\n  }\n\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\n\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\n\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon'); // Boilerplate for applying mixins to MatChip.\n\n/** @docs-private */\n\nclass MatChipBase {\n  constructor(_elementRef) {\n    this._elementRef = _elementRef;\n  }\n\n}\n\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n\n\nclass MatChipAvatar {}\n\nMatChipAvatar.ɵfac = function MatChipAvatar_Factory(t) {\n  return new (t || MatChipAvatar)();\n};\n\nMatChipAvatar.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChipAvatar,\n  selectors: [[\"mat-chip-avatar\"], [\"\", \"matChipAvatar\", \"\"]],\n  hostAttrs: [1, \"mat-chip-avatar\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_AVATAR,\n    useExisting: MatChipAvatar\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipAvatar, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-avatar, [matChipAvatar]',\n      host: {\n        'class': 'mat-chip-avatar'\n      },\n      providers: [{\n        provide: MAT_CHIP_AVATAR,\n        useExisting: MatChipAvatar\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n\n\nclass MatChipTrailingIcon {}\n\nMatChipTrailingIcon.ɵfac = function MatChipTrailingIcon_Factory(t) {\n  return new (t || MatChipTrailingIcon)();\n};\n\nMatChipTrailingIcon.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChipTrailingIcon,\n  selectors: [[\"mat-chip-trailing-icon\"], [\"\", \"matChipTrailingIcon\", \"\"]],\n  hostAttrs: [1, \"mat-chip-trailing-icon\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_TRAILING_ICON,\n    useExisting: MatChipTrailingIcon\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipTrailingIcon, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n      host: {\n        'class': 'mat-chip-trailing-icon'\n      },\n      providers: [{\n        provide: MAT_CHIP_TRAILING_ICON,\n        useExisting: MatChipTrailingIcon\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n\n\nclass MatChip extends _MatChipMixinBase {\n  constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n    super(elementRef);\n    this._ngZone = _ngZone;\n    this._changeDetectorRef = _changeDetectorRef;\n    /** Whether the chip has focus. */\n\n    this._hasFocus = false;\n    /** Whether the chip list is selectable */\n\n    this.chipListSelectable = true;\n    /** Whether the chip list is in multi-selection mode. */\n\n    this._chipListMultiple = false;\n    /** Whether the chip list as a whole is disabled. */\n\n    this._chipListDisabled = false;\n    this._selected = false;\n    this._selectable = true;\n    this._disabled = false;\n    this._removable = true;\n    /** Emits when the chip is focused. */\n\n    this._onFocus = new Subject();\n    /** Emits when the chip is blured. */\n\n    this._onBlur = new Subject();\n    /** Emitted when the chip is selected or deselected. */\n\n    this.selectionChange = new EventEmitter();\n    /** Emitted when the chip is destroyed. */\n\n    this.destroyed = new EventEmitter();\n    /** Emitted when a chip is to be removed. */\n\n    this.removed = new EventEmitter();\n\n    this._addHostClassName(); // Dynamically create the ripple target, append it within the chip, and use it as the\n    // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n    // the proper styles.\n\n\n    this._chipRippleTarget = _document.createElement('div');\n\n    this._chipRippleTarget.classList.add('mat-chip-ripple');\n\n    this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n\n    this._chipRipple.setupTriggerEvents(elementRef);\n\n    this.rippleConfig = globalRippleOptions || {};\n    this._animationsDisabled = animationMode === 'NoopAnimations';\n    this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n  }\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n\n\n  get rippleDisabled() {\n    return this.disabled || this.disableRipple || this._animationsDisabled || !!this.rippleConfig.disabled;\n  }\n  /** Whether the chip is selected. */\n\n\n  get selected() {\n    return this._selected;\n  }\n\n  set selected(value) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n\n      this._dispatchSelectionChange();\n    }\n  }\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n\n\n  get value() {\n    return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to its selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if its parent chip list is\n   * not selectable.\n   */\n\n\n  get selectable() {\n    return this._selectable && this.chipListSelectable;\n  }\n\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  /** Whether the chip is disabled. */\n\n\n  get disabled() {\n    return this._chipListDisabled || this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n\n\n  get removable() {\n    return this._removable;\n  }\n\n  set removable(value) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  /** The ARIA selected applied to the chip. */\n\n\n  get ariaSelected() {\n    // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n    // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n    return this.selectable && (this._chipListMultiple || this.selected) ? this.selected.toString() : null;\n  }\n\n  _addHostClassName() {\n    const basicChipAttrName = 'mat-basic-chip';\n    const element = this._elementRef.nativeElement;\n\n    if (element.hasAttribute(basicChipAttrName) || element.tagName.toLowerCase() === basicChipAttrName) {\n      element.classList.add(basicChipAttrName);\n      return;\n    } else {\n      element.classList.add('mat-standard-chip');\n    }\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({\n      chip: this\n    });\n\n    this._chipRipple._removeTriggerEvents();\n  }\n  /** Selects the chip. */\n\n\n  select() {\n    if (!this._selected) {\n      this._selected = true;\n\n      this._dispatchSelectionChange();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Deselects the chip. */\n\n\n  deselect() {\n    if (this._selected) {\n      this._selected = false;\n\n      this._dispatchSelectionChange();\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Select this chip and emit selected event */\n\n\n  selectViaInteraction() {\n    if (!this._selected) {\n      this._selected = true;\n\n      this._dispatchSelectionChange(true);\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  /** Toggles the current selected state of this chip. */\n\n\n  toggleSelected(isUserInput = false) {\n    this._selected = !this.selected;\n\n    this._dispatchSelectionChange(isUserInput);\n\n    this._changeDetectorRef.markForCheck();\n\n    return this.selected;\n  }\n  /** Allows for programmatic focusing of the chip. */\n\n\n  focus() {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n\n      this._onFocus.next({\n        chip: this\n      });\n    }\n\n    this._hasFocus = true;\n  }\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n\n\n  remove() {\n    if (this.removable) {\n      this.removed.emit({\n        chip: this\n      });\n    }\n  }\n  /** Handles click events on the chip. */\n\n\n  _handleClick(event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n  /** Handle custom key presses. */\n\n\n  _handleKeydown(event) {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove(); // Always prevent so page navigation does not occur\n\n        event.preventDefault();\n        break;\n\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        } // Always prevent space from scrolling the page since the list has focus\n\n\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur() {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n      this._ngZone.run(() => {\n        this._hasFocus = false;\n\n        this._onBlur.next({\n          chip: this\n        });\n      });\n    });\n  }\n\n  _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n\n}\n\nMatChip.ɵfac = function MatChip_Factory(t) {\n  return new (t || MatChip)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), i0.ɵɵinjectAttribute('tabindex'));\n};\n\nMatChip.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChip,\n  selectors: [[\"mat-basic-chip\"], [\"\", \"mat-basic-chip\", \"\"], [\"mat-chip\"], [\"\", \"mat-chip\", \"\"]],\n  contentQueries: function MatChip_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_AVATAR, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_TRAILING_ICON, 5);\n      i0.ɵɵcontentQuery(dirIndex, MAT_CHIP_REMOVE, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.avatar = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.trailingIcon = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.removeIcon = _t.first);\n    }\n  },\n  hostAttrs: [\"role\", \"option\", 1, \"mat-chip\", \"mat-focus-indicator\"],\n  hostVars: 14,\n  hostBindings: function MatChip_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatChip_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      })(\"keydown\", function MatChip_keydown_HostBindingHandler($event) {\n        return ctx._handleKeydown($event);\n      })(\"focus\", function MatChip_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChip_blur_HostBindingHandler() {\n        return ctx._blur();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx.tabIndex)(\"disabled\", ctx.disabled || null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-selected\", ctx.ariaSelected);\n      i0.ɵɵclassProp(\"mat-chip-selected\", ctx.selected)(\"mat-chip-with-avatar\", ctx.avatar)(\"mat-chip-with-trailing-icon\", ctx.trailingIcon || ctx.removeIcon)(\"mat-chip-disabled\", ctx.disabled)(\"_mat-animation-noopable\", ctx._animationsDisabled);\n    }\n  },\n  inputs: {\n    color: \"color\",\n    disableRipple: \"disableRipple\",\n    tabIndex: \"tabIndex\",\n    selected: \"selected\",\n    value: \"value\",\n    selectable: \"selectable\",\n    disabled: \"disabled\",\n    removable: \"removable\"\n  },\n  outputs: {\n    selectionChange: \"selectionChange\",\n    destroyed: \"destroyed\",\n    removed: \"removed\"\n  },\n  exportAs: [\"matChip\"],\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChip, [{\n    type: Directive,\n    args: [{\n      selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n      inputs: ['color', 'disableRipple', 'tabIndex'],\n      exportAs: 'matChip',\n      host: {\n        'class': 'mat-chip mat-focus-indicator',\n        '[attr.tabindex]': 'disabled ? null : tabIndex',\n        'role': 'option',\n        '[class.mat-chip-selected]': 'selected',\n        '[class.mat-chip-with-avatar]': 'avatar',\n        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n        '[class.mat-chip-disabled]': 'disabled',\n        '[class._mat-animation-noopable]': '_animationsDisabled',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-selected]': 'ariaSelected',\n        '(click)': '_handleClick($event)',\n        '(keydown)': '_handleKeydown($event)',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: i1.Platform\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [ANIMATION_MODULE_TYPE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Attribute,\n        args: ['tabindex']\n      }]\n    }];\n  }, {\n    avatar: [{\n      type: ContentChild,\n      args: [MAT_CHIP_AVATAR]\n    }],\n    trailingIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_TRAILING_ICON]\n    }],\n    removeIcon: [{\n      type: ContentChild,\n      args: [MAT_CHIP_REMOVE]\n    }],\n    selected: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    selectable: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    removable: [{\n      type: Input\n    }],\n    selectionChange: [{\n      type: Output\n    }],\n    destroyed: [{\n      type: Output\n    }],\n    removed: [{\n      type: Output\n    }]\n  });\n})();\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n\n\nclass MatChipRemove {\n  constructor(_parentChip, elementRef) {\n    this._parentChip = _parentChip;\n\n    if (elementRef.nativeElement.nodeName === 'BUTTON') {\n      elementRef.nativeElement.setAttribute('type', 'button');\n    }\n  }\n  /** Calls the parent chip's public `remove()` method if applicable. */\n\n\n  _handleClick(event) {\n    const parentChip = this._parentChip;\n\n    if (parentChip.removable && !parentChip.disabled) {\n      parentChip.remove();\n    } // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n\n\n    event.stopPropagation();\n  }\n\n}\n\nMatChipRemove.ɵfac = function MatChipRemove_Factory(t) {\n  return new (t || MatChipRemove)(i0.ɵɵdirectiveInject(MatChip), i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nMatChipRemove.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChipRemove,\n  selectors: [[\"\", \"matChipRemove\", \"\"]],\n  hostAttrs: [1, \"mat-chip-remove\", \"mat-chip-trailing-icon\"],\n  hostBindings: function MatChipRemove_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function MatChipRemove_click_HostBindingHandler($event) {\n        return ctx._handleClick($event);\n      });\n    }\n  },\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MAT_CHIP_REMOVE,\n    useExisting: MatChipRemove\n  }])]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipRemove, [{\n    type: Directive,\n    args: [{\n      selector: '[matChipRemove]',\n      host: {\n        'class': 'mat-chip-remove mat-chip-trailing-icon',\n        '(click)': '_handleClick($event)'\n      },\n      providers: [{\n        provide: MAT_CHIP_REMOVE,\n        useExisting: MatChipRemove\n      }]\n    }]\n  }], function () {\n    return [{\n      type: MatChip\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** Injection token to be used to override the default options for the chips module. */\n\n\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n\n/** @docs-private */\n\nconst _MatChipListBase = mixinErrorState(class {\n  constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup,\n  /** @docs-private */\n  ngControl) {\n    this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n    this._parentForm = _parentForm;\n    this._parentFormGroup = _parentFormGroup;\n    this.ngControl = ngControl;\n  }\n\n}); // Increasing integer for generating unique ids for chip-list components.\n\n\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\n\nclass MatChipListChange {\n  constructor(\n  /** Chip list that emitted the event. */\n  source,\n  /** Value of the chip list when the event was emitted. */\n  value) {\n    this.source = source;\n    this.value = value;\n  }\n\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\n\n\nclass MatChipList extends _MatChipListBase {\n  constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    this._elementRef = _elementRef;\n    this._changeDetectorRef = _changeDetectorRef;\n    this._dir = _dir;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n\n    this.controlType = 'mat-chip-list';\n    /**\n     * When a chip is destroyed, we store the index of the destroyed chip until the chips\n     * query list notifies about the update. This is necessary because we cannot determine an\n     * appropriate chip that should receive focus until the array of chips updated completely.\n     */\n\n    this._lastDestroyedChipIndex = null;\n    /** Subject that emits when the component has been destroyed. */\n\n    this._destroyed = new Subject();\n    /** Uid of the chip list */\n\n    this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n    /** Tab index for the chip list. */\n\n    this._tabIndex = 0;\n    /**\n     * User defined tab index.\n     * When it is not null, use user defined tab index. Otherwise use _tabIndex\n     */\n\n    this._userTabIndex = null;\n    /** Function when touched */\n\n    this._onTouched = () => {};\n    /** Function when changed */\n\n\n    this._onChange = () => {};\n\n    this._multiple = false;\n\n    this._compareWith = (o1, o2) => o1 === o2;\n\n    this._disabled = false;\n    /** Orientation of the chip list. */\n\n    this.ariaOrientation = 'horizontal';\n    this._selectable = true;\n    /** Event emitted when the selected chip list value has been changed by the user. */\n\n    this.change = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n\n    this.valueChange = new EventEmitter();\n\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n  /** The array of selected chips inside chip list. */\n\n\n  get selected() {\n    return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n  }\n  /** The ARIA role applied to the chip list. */\n\n\n  get role() {\n    return this.empty ? null : 'listbox';\n  }\n  /** Whether the user should be allowed to select multiple chips. */\n\n\n  get multiple() {\n    return this._multiple;\n  }\n\n  set multiple(value) {\n    this._multiple = coerceBooleanProperty(value);\n\n    this._syncChipsState();\n  }\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n\n\n  get compareWith() {\n    return this._compareWith;\n  }\n\n  set compareWith(fn) {\n    this._compareWith = fn;\n\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get value() {\n    return this._value;\n  }\n\n  set value(value) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get id() {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get required() {\n    return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n  }\n\n  set required(value) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get placeholder() {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n\n  set placeholder(value) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n\n\n  get focused() {\n    return this._chipInput && this._chipInput.focused || this._hasFocusedChip();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get empty() {\n    return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get shouldLabelFloat() {\n    return !this.empty || this.focused;\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  get disabled() {\n    return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    this._syncChipsState();\n  }\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n\n\n  get selectable() {\n    return this._selectable;\n  }\n\n  set selectable(value) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n\n  set tabIndex(value) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n  /** Combined stream of all of the child chips' selection change events. */\n\n\n  get chipSelectionChanges() {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n  /** Combined stream of all of the child chips' focus change events. */\n\n\n  get chipFocusChanges() {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n  /** Combined stream of all of the child chips' blur change events. */\n\n\n  get chipBlurChanges() {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n  /** Combined stream of all of the child chips' remove change events. */\n\n\n  get chipRemoveChanges() {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this.chips).withWrap().withVerticalOrientation().withHomeAndEnd().withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    if (this._dir) {\n      this._dir.change.pipe(takeUntil(this._destroyed)).subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n    }\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    }); // When the list changes, re-subscribe\n\n\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      if (this.disabled) {\n        // Since this happens after the content has been\n        // checked, we need to defer it to the next tick.\n        Promise.resolve().then(() => {\n          this._syncChipsState();\n        });\n      }\n\n      this._resetChips(); // Reset chips selected/deselected status\n\n\n      this._initializeSelection(); // Check to see if we need to update our tab index\n\n\n      this._updateTabIndex(); // Check to see if we have a destroyed chip and need to refocus\n\n\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n\n      if (this.ngControl.disabled !== this._disabled) {\n        this.disabled = !!this.ngControl.disabled;\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n\n    this._destroyed.complete();\n\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n  /** Associates an HTML input element with this chip list. */\n\n\n  registerInput(inputElement) {\n    this._chipInput = inputElement; // We use this attribute to match the chip list to its input in test harnesses.\n    // Set the attribute directly here to avoid \"changed after checked\" errors.\n\n    this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  setDescribedByIds(ids) {\n    this._ariaDescribedby = ids.join(' ');\n  } // Implemented as part of ControlValueAccessor.\n\n\n  writeValue(value) {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnChange(fn) {\n    this._onChange = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  } // Implemented as part of ControlValueAccessor.\n\n\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n\n\n  onContainerClick(event) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n  /**\n   * Focuses the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n\n\n  focus(options) {\n    if (this.disabled) {\n      return;\n    } // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n\n\n    if (this._chipInput && this._chipInput.focused) {// do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n\n      this.stateChanges.next();\n    } else {\n      this._focusInput(options);\n\n      this.stateChanges.next();\n    }\n  }\n  /** Attempt to focus an input if we have one. */\n\n\n  _focusInput(options) {\n    if (this._chipInput) {\n      this._chipInput.focus(options);\n    }\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n\n\n  _keydown(event) {\n    const target = event.target;\n\n    if (target && target.classList.contains('mat-chip')) {\n      this._keyManager.onKeydown(event);\n\n      this.stateChanges.next();\n    }\n  }\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n\n\n  _updateTabIndex() {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n\n\n  _updateFocusForDestroyedChips() {\n    // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n    if (this._lastDestroyedChipIndex != null) {\n      if (this.chips.length) {\n        const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n\n        this._keyManager.setActiveItem(newChipIndex);\n      } else {\n        this.focus();\n      }\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n\n\n  _isValidIndex(index) {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  _setSelectionByValue(value, isUserInput = true) {\n    this._clearSelection();\n\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput); // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n\n\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n\n\n  _selectValue(value, isUserInput = true) {\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value, value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  _initializeSelection() {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n\n        this.stateChanges.next();\n      }\n    });\n  }\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n\n\n  _clearSelection(skip) {\n    this._selectionModel.clear();\n\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n\n\n  _sortValues() {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n  /** Emits change event to set the model value. */\n\n\n  _propagateChanges(fallbackValue) {\n    let valueToEmit = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n\n    this._onChange(valueToEmit);\n\n    this._changeDetectorRef.markForCheck();\n  }\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n\n\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n  /** Mark the field as touched */\n\n\n  _markAsTouched() {\n    this._onTouched();\n\n    this._changeDetectorRef.markForCheck();\n\n    this.stateChanges.next();\n  }\n  /**\n   * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n   * user to tab out of it. This prevents the list from capturing focus and redirecting\n   * it back to the first chip, creating a focus trap, if it user tries to tab away.\n   */\n\n\n  _allowFocusEscape() {\n    if (this._tabIndex !== -1) {\n      this._tabIndex = -1;\n      setTimeout(() => {\n        this._tabIndex = this._userTabIndex || 0;\n\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  _resetChips() {\n    this._dropSubscriptions();\n\n    this._listenToChipsFocus();\n\n    this._listenToChipsSelection();\n\n    this._listenToChipsRemoved();\n  }\n\n  _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n\n      this._chipRemoveSubscription = null;\n    }\n  }\n  /** Listens to user-generated selection events on each chip. */\n\n\n  _listenToChipsSelection() {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected ? this._selectionModel.select(event.source) : this._selectionModel.deselect(event.source); // For single selection chip list, make sure the deselected value is unselected.\n\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n  /** Listens to user-generated selection events on each chip. */\n\n\n  _listenToChipsFocus() {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItem(chipIndex);\n      }\n\n      this.stateChanges.next();\n    });\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n\n      this.stateChanges.next();\n    });\n  }\n\n  _listenToChipsRemoved() {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip); // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n  /** Checks whether an event comes from inside a chip element. */\n\n\n  _originatesFromChip(event) {\n    let currentElement = event.target;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n  /** Checks whether any of the chips is focused. */\n\n\n  _hasFocusedChip() {\n    return this.chips && this.chips.some(chip => chip._hasFocus);\n  }\n  /** Syncs the list's state with the individual chips. */\n\n\n  _syncChipsState() {\n    if (this.chips) {\n      this.chips.forEach(chip => {\n        chip._chipListDisabled = this._disabled;\n        chip._chipListMultiple = this.multiple;\n      });\n    }\n  }\n\n}\n\nMatChipList.ɵfac = function MatChipList_Factory(t) {\n  return new (t || MatChipList)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i1$1.Directionality, 8), i0.ɵɵdirectiveInject(i2.NgForm, 8), i0.ɵɵdirectiveInject(i2.FormGroupDirective, 8), i0.ɵɵdirectiveInject(i3.ErrorStateMatcher), i0.ɵɵdirectiveInject(i2.NgControl, 10));\n};\n\nMatChipList.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: MatChipList,\n  selectors: [[\"mat-chip-list\"]],\n  contentQueries: function MatChipList_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, MatChip, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.chips = _t);\n    }\n  },\n  hostAttrs: [1, \"mat-chip-list\"],\n  hostVars: 15,\n  hostBindings: function MatChipList_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"focus\", function MatChipList_focus_HostBindingHandler() {\n        return ctx.focus();\n      })(\"blur\", function MatChipList_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"keydown\", function MatChipList_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx._uid);\n      i0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : ctx._tabIndex)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-required\", ctx.role ? ctx.required : null)(\"aria-disabled\", ctx.disabled.toString())(\"aria-invalid\", ctx.errorState)(\"aria-multiselectable\", ctx.multiple)(\"role\", ctx.role)(\"aria-orientation\", ctx.ariaOrientation);\n      i0.ɵɵclassProp(\"mat-chip-list-disabled\", ctx.disabled)(\"mat-chip-list-invalid\", ctx.errorState)(\"mat-chip-list-required\", ctx.required);\n    }\n  },\n  inputs: {\n    errorStateMatcher: \"errorStateMatcher\",\n    multiple: \"multiple\",\n    compareWith: \"compareWith\",\n    value: \"value\",\n    required: \"required\",\n    placeholder: \"placeholder\",\n    disabled: \"disabled\",\n    ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"],\n    selectable: \"selectable\",\n    tabIndex: \"tabIndex\"\n  },\n  outputs: {\n    change: \"change\",\n    valueChange: \"valueChange\"\n  },\n  exportAs: [\"matChipList\"],\n  features: [i0.ɵɵProvidersFeature([{\n    provide: MatFormFieldControl,\n    useExisting: MatChipList\n  }]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c0,\n  decls: 2,\n  vars: 0,\n  consts: [[1, \"mat-chip-list-wrapper\"]],\n  template: function MatChipList_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef();\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵprojection(1);\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipList, [{\n    type: Component,\n    args: [{\n      selector: 'mat-chip-list',\n      template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n      exportAs: 'matChipList',\n      host: {\n        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n        '[attr.aria-describedby]': '_ariaDescribedby || null',\n        '[attr.aria-required]': 'role ? required : null',\n        '[attr.aria-disabled]': 'disabled.toString()',\n        '[attr.aria-invalid]': 'errorState',\n        '[attr.aria-multiselectable]': 'multiple',\n        '[attr.role]': 'role',\n        '[class.mat-chip-list-disabled]': 'disabled',\n        '[class.mat-chip-list-invalid]': 'errorState',\n        '[class.mat-chip-list-required]': 'required',\n        '[attr.aria-orientation]': 'ariaOrientation',\n        'class': 'mat-chip-list',\n        '(focus)': 'focus()',\n        '(blur)': '_blur()',\n        '(keydown)': '_keydown($event)',\n        '[id]': '_uid'\n      },\n      providers: [{\n        provide: MatFormFieldControl,\n        useExisting: MatChipList\n      }],\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }, {\n      type: i1$1.Directionality,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.NgForm,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i2.FormGroupDirective,\n      decorators: [{\n        type: Optional\n      }]\n    }, {\n      type: i3.ErrorStateMatcher\n    }, {\n      type: i2.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }]\n    }];\n  }, {\n    errorStateMatcher: [{\n      type: Input\n    }],\n    multiple: [{\n      type: Input\n    }],\n    compareWith: [{\n      type: Input\n    }],\n    value: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }],\n    ariaOrientation: [{\n      type: Input,\n      args: ['aria-orientation']\n    }],\n    selectable: [{\n      type: Input\n    }],\n    tabIndex: [{\n      type: Input\n    }],\n    change: [{\n      type: Output\n    }],\n    valueChange: [{\n      type: Output\n    }],\n    chips: [{\n      type: ContentChildren,\n      args: [MatChip, {\n        // We need to use `descendants: true`, because Ivy will no longer match\n        // indirect descendants if it's left as false.\n        descendants: true\n      }]\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\n\n\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n\nclass MatChipInput {\n  constructor(_elementRef, _defaultOptions) {\n    this._elementRef = _elementRef;\n    this._defaultOptions = _defaultOptions;\n    /** Whether the control is focused. */\n\n    this.focused = false;\n    this._addOnBlur = false;\n    /**\n     * The list of key codes that will trigger a chipEnd event.\n     *\n     * Defaults to `[ENTER]`.\n     */\n\n    this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n    /** Emitted when a chip is to be added. */\n\n    this.chipEnd = new EventEmitter();\n    /** The input's placeholder text. */\n\n    this.placeholder = '';\n    /** Unique id for the input. */\n\n    this.id = `mat-chip-list-input-${nextUniqueId++}`;\n    this._disabled = false;\n    this.inputElement = this._elementRef.nativeElement;\n  }\n  /** Register input for chip list */\n\n\n  set chipList(value) {\n    if (value) {\n      this._chipList = value;\n\n      this._chipList.registerInput(this);\n    }\n  }\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n\n\n  get addOnBlur() {\n    return this._addOnBlur;\n  }\n\n  set addOnBlur(value) {\n    this._addOnBlur = coerceBooleanProperty(value);\n  }\n  /** Whether the input is disabled. */\n\n\n  get disabled() {\n    return this._disabled || this._chipList && this._chipList.disabled;\n  }\n\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  /** Whether the input is empty. */\n\n\n  get empty() {\n    return !this.inputElement.value;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.chipEnd.complete();\n  }\n\n  ngAfterContentInit() {\n    this._focusLastChipOnBackspace = this.empty;\n  }\n  /** Utility method to make host definition/tests more clear. */\n\n\n  _keydown(event) {\n    if (event) {\n      // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n      // want to do this when going backwards, because focus should go back to the first chip.\n      if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n        this._chipList._allowFocusEscape();\n      } // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n      // We focus the last chip on backspace only after the user has released the backspace button,\n      // and the input is empty (see behaviour in _keyup)\n\n\n      if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n        this._chipList._keyManager.setLastItemActive();\n\n        event.preventDefault();\n        return;\n      } else {\n        this._focusLastChipOnBackspace = false;\n      }\n    }\n\n    this._emitChipEnd(event);\n  }\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n\n\n  _keyup(event) {\n    // Allow user to move focus to chips next time he presses backspace\n    if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n      this._focusLastChipOnBackspace = true;\n      event.preventDefault();\n    }\n  }\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n\n\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n\n    this.focused = false; // Blur the chip list if it is not focused\n\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._focusLastChipOnBackspace = this.empty;\n\n    this._chipList.stateChanges.next();\n  }\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n\n\n  _emitChipEnd(event) {\n    if (!this.inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n\n    if (!event || this._isSeparatorKey(event)) {\n      this.chipEnd.emit({\n        input: this.inputElement,\n        value: this.inputElement.value,\n        chipInput: this\n      });\n      event?.preventDefault();\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n  /** Focuses the input. */\n\n\n  focus(options) {\n    this.inputElement.focus(options);\n  }\n  /** Clears the input */\n\n\n  clear() {\n    this.inputElement.value = '';\n    this._focusLastChipOnBackspace = true;\n  }\n  /** Checks whether a keycode is one of the configured separators. */\n\n\n  _isSeparatorKey(event) {\n    return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n  }\n\n}\n\nMatChipInput.ɵfac = function MatChipInput_Factory(t) {\n  return new (t || MatChipInput)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(MAT_CHIPS_DEFAULT_OPTIONS));\n};\n\nMatChipInput.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: MatChipInput,\n  selectors: [[\"input\", \"matChipInputFor\", \"\"]],\n  hostAttrs: [1, \"mat-chip-input\", \"mat-input-element\"],\n  hostVars: 5,\n  hostBindings: function MatChipInput_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown\", function MatChipInput_keydown_HostBindingHandler($event) {\n        return ctx._keydown($event);\n      })(\"keyup\", function MatChipInput_keyup_HostBindingHandler($event) {\n        return ctx._keyup($event);\n      })(\"blur\", function MatChipInput_blur_HostBindingHandler() {\n        return ctx._blur();\n      })(\"focus\", function MatChipInput_focus_HostBindingHandler() {\n        return ctx._focus();\n      })(\"input\", function MatChipInput_input_HostBindingHandler() {\n        return ctx._onInput();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"id\", ctx.id);\n      i0.ɵɵattribute(\"disabled\", ctx.disabled || null)(\"placeholder\", ctx.placeholder || null)(\"aria-invalid\", ctx._chipList && ctx._chipList.ngControl ? ctx._chipList.ngControl.invalid : null)(\"aria-required\", ctx._chipList && ctx._chipList.required || null);\n    }\n  },\n  inputs: {\n    chipList: [\"matChipInputFor\", \"chipList\"],\n    addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"],\n    separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"],\n    placeholder: \"placeholder\",\n    id: \"id\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    chipEnd: \"matChipInputTokenEnd\"\n  },\n  exportAs: [\"matChipInput\", \"matChipInputFor\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipInput, [{\n    type: Directive,\n    args: [{\n      selector: 'input[matChipInputFor]',\n      exportAs: 'matChipInput, matChipInputFor',\n      host: {\n        'class': 'mat-chip-input mat-input-element',\n        '(keydown)': '_keydown($event)',\n        '(keyup)': '_keyup($event)',\n        '(blur)': '_blur()',\n        '(focus)': '_focus()',\n        '(input)': '_onInput()',\n        '[id]': 'id',\n        '[attr.disabled]': 'disabled || null',\n        '[attr.placeholder]': 'placeholder || null',\n        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n        '[attr.aria-required]': '_chipList && _chipList.required || null'\n      }\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [MAT_CHIPS_DEFAULT_OPTIONS]\n      }]\n    }];\n  }, {\n    chipList: [{\n      type: Input,\n      args: ['matChipInputFor']\n    }],\n    addOnBlur: [{\n      type: Input,\n      args: ['matChipInputAddOnBlur']\n    }],\n    separatorKeyCodes: [{\n      type: Input,\n      args: ['matChipInputSeparatorKeyCodes']\n    }],\n    chipEnd: [{\n      type: Output,\n      args: ['matChipInputTokenEnd']\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    id: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  });\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nconst CHIP_DECLARATIONS = [MatChipList, MatChip, MatChipInput, MatChipRemove, MatChipAvatar, MatChipTrailingIcon];\n\nclass MatChipsModule {}\n\nMatChipsModule.ɵfac = function MatChipsModule_Factory(t) {\n  return new (t || MatChipsModule)();\n};\n\nMatChipsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: MatChipsModule\n});\nMatChipsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  providers: [ErrorStateMatcher, {\n    provide: MAT_CHIPS_DEFAULT_OPTIONS,\n    useValue: {\n      separatorKeyCodes: [ENTER]\n    }\n  }],\n  imports: [[MatCommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatChipsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [MatCommonModule],\n      exports: CHIP_DECLARATIONS,\n      declarations: CHIP_DECLARATIONS,\n      providers: [ErrorStateMatcher, {\n        provide: MAT_CHIPS_DEFAULT_OPTIONS,\n        useValue: {\n          separatorKeyCodes: [ENTER]\n        }\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };","map":{"version":3,"names":["SPACE","BACKSPACE","DELETE","TAB","hasModifierKey","ENTER","i0","InjectionToken","Directive","EventEmitter","Optional","Inject","Attribute","ContentChild","Input","Output","Component","ViewEncapsulation","ChangeDetectionStrategy","Self","ContentChildren","NgModule","i3","mixinTabIndex","mixinColor","mixinDisableRipple","RippleRenderer","MAT_RIPPLE_GLOBAL_OPTIONS","mixinErrorState","MatCommonModule","ErrorStateMatcher","coerceBooleanProperty","i1","DOCUMENT","ANIMATION_MODULE_TYPE","Subject","merge","take","takeUntil","startWith","FocusKeyManager","i1$1","SelectionModel","i2","Validators","MatFormFieldControl","MatChipSelectionChange","constructor","source","selected","isUserInput","MAT_CHIP_REMOVE","MAT_CHIP_AVATAR","MAT_CHIP_TRAILING_ICON","MatChipBase","_elementRef","_MatChipMixinBase","MatChipAvatar","ɵfac","ɵdir","provide","useExisting","type","args","selector","host","providers","MatChipTrailingIcon","MatChip","elementRef","_ngZone","platform","globalRippleOptions","_changeDetectorRef","_document","animationMode","tabIndex","_hasFocus","chipListSelectable","_chipListMultiple","_chipListDisabled","_selected","_selectable","_disabled","_removable","_onFocus","_onBlur","selectionChange","destroyed","removed","_addHostClassName","_chipRippleTarget","createElement","classList","add","nativeElement","appendChild","_chipRipple","setupTriggerEvents","rippleConfig","_animationsDisabled","parseInt","rippleDisabled","disabled","disableRipple","value","coercedValue","_dispatchSelectionChange","_value","undefined","textContent","selectable","removable","ariaSelected","toString","basicChipAttrName","element","hasAttribute","tagName","toLowerCase","ngOnDestroy","emit","chip","_removeTriggerEvents","select","markForCheck","deselect","selectViaInteraction","toggleSelected","focus","next","remove","_handleClick","event","preventDefault","stopPropagation","_handleKeydown","keyCode","_blur","onStable","pipe","subscribe","run","ElementRef","NgZone","Platform","ChangeDetectorRef","inputs","exportAs","decorators","avatar","trailingIcon","removeIcon","MatChipRemove","_parentChip","nodeName","setAttribute","parentChip","MAT_CHIPS_DEFAULT_OPTIONS","_MatChipListBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","nextUniqueId$1","MatChipListChange","MatChipList","_dir","controlType","_lastDestroyedChipIndex","_destroyed","_uid","_tabIndex","_userTabIndex","_onTouched","_onChange","_multiple","_compareWith","o1","o2","ariaOrientation","change","valueChange","valueAccessor","multiple","_selectionModel","role","empty","_syncChipsState","compareWith","fn","_initializeSelection","writeValue","id","_chipInput","required","_required","control","hasValidator","stateChanges","placeholder","_placeholder","focused","_hasFocusedChip","chips","length","shouldLabelFloat","forEach","chipSelectionChanges","map","chipFocusChanges","chipBlurChanges","chipRemoveChanges","ngAfterContentInit","_keyManager","withWrap","withVerticalOrientation","withHomeAndEnd","withHorizontalOrientation","dir","tabOut","_allowFocusEscape","changes","Promise","resolve","then","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","ngOnInit","ngDoCheck","updateErrorState","complete","_dropSubscriptions","registerInput","inputElement","setDescribedByIds","ids","_ariaDescribedby","join","_setSelectionByValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","onContainerClick","_originatesFromChip","options","setFirstItemActive","_focusInput","_keydown","target","contains","onKeydown","newChipIndex","Math","min","setActiveItem","_isValidIndex","index","_clearSelection","Array","isArray","currentValue","_selectValue","_sortValues","correspondingChip","find","skip","clear","_propagateChanges","fallbackValue","valueToEmit","setTimeout","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","unsubscribe","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","isSelected","chipIndex","toArray","indexOf","updateActiveItem","currentElement","parentElement","some","Directionality","NgForm","FormGroupDirective","NgControl","ɵcmp","template","encapsulation","None","changeDetection","OnPush","styles","errorStateMatcher","descendants","nextUniqueId","MatChipInput","_defaultOptions","_addOnBlur","separatorKeyCodes","chipEnd","chipList","_chipList","addOnBlur","ngOnChanges","_focusLastChipOnBackspace","setLastItemActive","_emitChipEnd","_keyup","_focus","_isSeparatorKey","input","chipInput","_onInput","Set","has","CHIP_DECLARATIONS","MatChipsModule","ɵmod","ɵinj","useValue","imports","exports","declarations"],"sources":["/Users/stevenkauyedauty/projects/codeChallenges/bookCatalog/node_modules/@angular/material/fesm2020/chips.mjs"],"sourcesContent":["import { SPACE, BACKSPACE, DELETE, TAB, hasModifierKey, ENTER } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Attribute, ContentChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, Self, ContentChildren, NgModule } from '@angular/core';\nimport * as i3 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, RippleRenderer, MAT_RIPPLE_GLOBAL_OPTIONS, mixinErrorState, MatCommonModule, ErrorStateMatcher } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subject, merge } from 'rxjs';\nimport { take, takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { MatFormFieldControl } from '@angular/material/form-field';\n\n/** Event object emitted by MatChip when selected or deselected. */\nclass MatChipSelectionChange {\n    constructor(\n    /** Reference to the chip that emitted the event. */\n    source, \n    /** Whether the chip that emitted the event is selected. */\n    selected, \n    /** Whether the selection change was a result of a user interaction. */\n    isUserInput = false) {\n        this.source = source;\n        this.selected = selected;\n        this.isUserInput = isUserInput;\n    }\n}\n/**\n * Injection token that can be used to reference instances of `MatChipRemove`. It serves as\n * alternative token to the actual `MatChipRemove` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_REMOVE = new InjectionToken('MatChipRemove');\n/**\n * Injection token that can be used to reference instances of `MatChipAvatar`. It serves as\n * alternative token to the actual `MatChipAvatar` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_AVATAR = new InjectionToken('MatChipAvatar');\n/**\n * Injection token that can be used to reference instances of `MatChipTrailingIcon`. It serves as\n * alternative token to the actual `MatChipTrailingIcon` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_CHIP_TRAILING_ICON = new InjectionToken('MatChipTrailingIcon');\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nclass MatChipBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatChipMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(MatChipBase), 'primary'), -1);\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\nclass MatChipAvatar {\n}\nMatChipAvatar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipAvatar, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatChipAvatar.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatChipAvatar, selector: \"mat-chip-avatar, [matChipAvatar]\", host: { classAttribute: \"mat-chip-avatar\" }, providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipAvatar, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-chip-avatar, [matChipAvatar]',\n                    host: { 'class': 'mat-chip-avatar' },\n                    providers: [{ provide: MAT_CHIP_AVATAR, useExisting: MatChipAvatar }],\n                }]\n        }] });\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\nclass MatChipTrailingIcon {\n}\nMatChipTrailingIcon.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipTrailingIcon, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatChipTrailingIcon.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatChipTrailingIcon, selector: \"mat-chip-trailing-icon, [matChipTrailingIcon]\", host: { classAttribute: \"mat-chip-trailing-icon\" }, providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipTrailingIcon, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n                    host: { 'class': 'mat-chip-trailing-icon' },\n                    providers: [{ provide: MAT_CHIP_TRAILING_ICON, useExisting: MatChipTrailingIcon }],\n                }]\n        }] });\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\nclass MatChip extends _MatChipMixinBase {\n    constructor(elementRef, _ngZone, platform, globalRippleOptions, _changeDetectorRef, _document, animationMode, tabIndex) {\n        super(elementRef);\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Whether the chip has focus. */\n        this._hasFocus = false;\n        /** Whether the chip list is selectable */\n        this.chipListSelectable = true;\n        /** Whether the chip list is in multi-selection mode. */\n        this._chipListMultiple = false;\n        /** Whether the chip list as a whole is disabled. */\n        this._chipListDisabled = false;\n        this._selected = false;\n        this._selectable = true;\n        this._disabled = false;\n        this._removable = true;\n        /** Emits when the chip is focused. */\n        this._onFocus = new Subject();\n        /** Emits when the chip is blured. */\n        this._onBlur = new Subject();\n        /** Emitted when the chip is selected or deselected. */\n        this.selectionChange = new EventEmitter();\n        /** Emitted when the chip is destroyed. */\n        this.destroyed = new EventEmitter();\n        /** Emitted when a chip is to be removed. */\n        this.removed = new EventEmitter();\n        this._addHostClassName();\n        // Dynamically create the ripple target, append it within the chip, and use it as the\n        // chip's ripple target. Adding the class '.mat-chip-ripple' ensures that it will have\n        // the proper styles.\n        this._chipRippleTarget = _document.createElement('div');\n        this._chipRippleTarget.classList.add('mat-chip-ripple');\n        this._elementRef.nativeElement.appendChild(this._chipRippleTarget);\n        this._chipRipple = new RippleRenderer(this, _ngZone, this._chipRippleTarget, platform);\n        this._chipRipple.setupTriggerEvents(elementRef);\n        this.rippleConfig = globalRippleOptions || {};\n        this._animationsDisabled = animationMode === 'NoopAnimations';\n        this.tabIndex = tabIndex != null ? parseInt(tabIndex) || -1 : -1;\n    }\n    /**\n     * Whether ripples are disabled on interaction\n     * @docs-private\n     */\n    get rippleDisabled() {\n        return (this.disabled ||\n            this.disableRipple ||\n            this._animationsDisabled ||\n            !!this.rippleConfig.disabled);\n    }\n    /** Whether the chip is selected. */\n    get selected() {\n        return this._selected;\n    }\n    set selected(value) {\n        const coercedValue = coerceBooleanProperty(value);\n        if (coercedValue !== this._selected) {\n            this._selected = coercedValue;\n            this._dispatchSelectionChange();\n        }\n    }\n    /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n    get value() {\n        return this._value !== undefined ? this._value : this._elementRef.nativeElement.textContent;\n    }\n    set value(value) {\n        this._value = value;\n    }\n    /**\n     * Whether or not the chip is selectable. When a chip is not selectable,\n     * changes to its selected state are always ignored. By default a chip is\n     * selectable, and it becomes non-selectable if its parent chip list is\n     * not selectable.\n     */\n    get selectable() {\n        return this._selectable && this.chipListSelectable;\n    }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n    }\n    /** Whether the chip is disabled. */\n    get disabled() {\n        return this._chipListDisabled || this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /**\n     * Determines whether or not the chip displays the remove styling and emits (removed) events.\n     */\n    get removable() {\n        return this._removable;\n    }\n    set removable(value) {\n        this._removable = coerceBooleanProperty(value);\n    }\n    /** The ARIA selected applied to the chip. */\n    get ariaSelected() {\n        // Remove the `aria-selected` when the chip is deselected in single-selection mode, because\n        // it adds noise to NVDA users where \"not selected\" will be read out for each chip.\n        return this.selectable && (this._chipListMultiple || this.selected)\n            ? this.selected.toString()\n            : null;\n    }\n    _addHostClassName() {\n        const basicChipAttrName = 'mat-basic-chip';\n        const element = this._elementRef.nativeElement;\n        if (element.hasAttribute(basicChipAttrName) ||\n            element.tagName.toLowerCase() === basicChipAttrName) {\n            element.classList.add(basicChipAttrName);\n            return;\n        }\n        else {\n            element.classList.add('mat-standard-chip');\n        }\n    }\n    ngOnDestroy() {\n        this.destroyed.emit({ chip: this });\n        this._chipRipple._removeTriggerEvents();\n    }\n    /** Selects the chip. */\n    select() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Deselects the chip. */\n    deselect() {\n        if (this._selected) {\n            this._selected = false;\n            this._dispatchSelectionChange();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Select this chip and emit selected event */\n    selectViaInteraction() {\n        if (!this._selected) {\n            this._selected = true;\n            this._dispatchSelectionChange(true);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Toggles the current selected state of this chip. */\n    toggleSelected(isUserInput = false) {\n        this._selected = !this.selected;\n        this._dispatchSelectionChange(isUserInput);\n        this._changeDetectorRef.markForCheck();\n        return this.selected;\n    }\n    /** Allows for programmatic focusing of the chip. */\n    focus() {\n        if (!this._hasFocus) {\n            this._elementRef.nativeElement.focus();\n            this._onFocus.next({ chip: this });\n        }\n        this._hasFocus = true;\n    }\n    /**\n     * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n     * BACKSPACE keys are pressed.\n     *\n     * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n     */\n    remove() {\n        if (this.removable) {\n            this.removed.emit({ chip: this });\n        }\n    }\n    /** Handles click events on the chip. */\n    _handleClick(event) {\n        if (this.disabled) {\n            event.preventDefault();\n        }\n        else {\n            event.stopPropagation();\n        }\n    }\n    /** Handle custom key presses. */\n    _handleKeydown(event) {\n        if (this.disabled) {\n            return;\n        }\n        switch (event.keyCode) {\n            case DELETE:\n            case BACKSPACE:\n                // If we are removable, remove the focused chip\n                this.remove();\n                // Always prevent so page navigation does not occur\n                event.preventDefault();\n                break;\n            case SPACE:\n                // If we are selectable, toggle the focused chip\n                if (this.selectable) {\n                    this.toggleSelected(true);\n                }\n                // Always prevent space from scrolling the page since the list has focus\n                event.preventDefault();\n                break;\n        }\n    }\n    _blur() {\n        // When animations are enabled, Angular may end up removing the chip from the DOM a little\n        // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n        // that moves focus not the next item. To work around the issue, we defer marking the chip\n        // as not focused until the next time the zone stabilizes.\n        this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            this._ngZone.run(() => {\n                this._hasFocus = false;\n                this._onBlur.next({ chip: this });\n            });\n        });\n    }\n    _dispatchSelectionChange(isUserInput = false) {\n        this.selectionChange.emit({\n            source: this,\n            isUserInput,\n            selected: this._selected,\n        });\n    }\n}\nMatChip.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChip, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.Platform }, { token: MAT_RIPPLE_GLOBAL_OPTIONS, optional: true }, { token: i0.ChangeDetectorRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatChip.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatChip, selector: \"mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]\", inputs: { color: \"color\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\", selected: \"selected\", value: \"value\", selectable: \"selectable\", disabled: \"disabled\", removable: \"removable\" }, outputs: { selectionChange: \"selectionChange\", destroyed: \"destroyed\", removed: \"removed\" }, host: { attributes: { \"role\": \"option\" }, listeners: { \"click\": \"_handleClick($event)\", \"keydown\": \"_handleKeydown($event)\", \"focus\": \"focus()\", \"blur\": \"_blur()\" }, properties: { \"attr.tabindex\": \"disabled ? null : tabIndex\", \"class.mat-chip-selected\": \"selected\", \"class.mat-chip-with-avatar\": \"avatar\", \"class.mat-chip-with-trailing-icon\": \"trailingIcon || removeIcon\", \"class.mat-chip-disabled\": \"disabled\", \"class._mat-animation-noopable\": \"_animationsDisabled\", \"attr.disabled\": \"disabled || null\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-selected\": \"ariaSelected\" }, classAttribute: \"mat-chip mat-focus-indicator\" }, queries: [{ propertyName: \"avatar\", first: true, predicate: MAT_CHIP_AVATAR, descendants: true }, { propertyName: \"trailingIcon\", first: true, predicate: MAT_CHIP_TRAILING_ICON, descendants: true }, { propertyName: \"removeIcon\", first: true, predicate: MAT_CHIP_REMOVE, descendants: true }], exportAs: [\"matChip\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChip, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n                    inputs: ['color', 'disableRipple', 'tabIndex'],\n                    exportAs: 'matChip',\n                    host: {\n                        'class': 'mat-chip mat-focus-indicator',\n                        '[attr.tabindex]': 'disabled ? null : tabIndex',\n                        'role': 'option',\n                        '[class.mat-chip-selected]': 'selected',\n                        '[class.mat-chip-with-avatar]': 'avatar',\n                        '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n                        '[class.mat-chip-disabled]': 'disabled',\n                        '[class._mat-animation-noopable]': '_animationsDisabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-selected]': 'ariaSelected',\n                        '(click)': '_handleClick($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.Platform }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_RIPPLE_GLOBAL_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }]; }, propDecorators: { avatar: [{\n                type: ContentChild,\n                args: [MAT_CHIP_AVATAR]\n            }], trailingIcon: [{\n                type: ContentChild,\n                args: [MAT_CHIP_TRAILING_ICON]\n            }], removeIcon: [{\n                type: ContentChild,\n                args: [MAT_CHIP_REMOVE]\n            }], selected: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selectable: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], removable: [{\n                type: Input\n            }], selectionChange: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], removed: [{\n                type: Output\n            }] } });\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\nclass MatChipRemove {\n    constructor(_parentChip, elementRef) {\n        this._parentChip = _parentChip;\n        if (elementRef.nativeElement.nodeName === 'BUTTON') {\n            elementRef.nativeElement.setAttribute('type', 'button');\n        }\n    }\n    /** Calls the parent chip's public `remove()` method if applicable. */\n    _handleClick(event) {\n        const parentChip = this._parentChip;\n        if (parentChip.removable && !parentChip.disabled) {\n            parentChip.remove();\n        }\n        // We need to stop event propagation because otherwise the event will bubble up to the\n        // form field and cause the `onContainerClick` method to be invoked. This method would then\n        // reset the focused chip that has been focused after chip removal. Usually the parent\n        // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n        // that the chip is being removed before the event bubbles up.\n        event.stopPropagation();\n    }\n}\nMatChipRemove.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipRemove, deps: [{ token: MatChip }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nMatChipRemove.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatChipRemove, selector: \"[matChipRemove]\", host: { listeners: { \"click\": \"_handleClick($event)\" }, classAttribute: \"mat-chip-remove mat-chip-trailing-icon\" }, providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipRemove, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matChipRemove]',\n                    host: {\n                        'class': 'mat-chip-remove mat-chip-trailing-icon',\n                        '(click)': '_handleClick($event)',\n                    },\n                    providers: [{ provide: MAT_CHIP_REMOVE, useExisting: MatChipRemove }],\n                }]\n        }], ctorParameters: function () { return [{ type: MatChip }, { type: i0.ElementRef }]; } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for the chips module. */\nconst MAT_CHIPS_DEFAULT_OPTIONS = new InjectionToken('mat-chips-default-options');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nconst _MatChipListBase = mixinErrorState(class {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n});\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId$1 = 0;\n/** Change event object that is emitted when the chip list value has changed. */\nclass MatChipListChange {\n    constructor(\n    /** Chip list that emitted the event. */\n    source, \n    /** Value of the chip list when the event was emitted. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * A material design chips component (named ChipList for its similarity to the List component).\n */\nclass MatChipList extends _MatChipListBase {\n    constructor(_elementRef, _changeDetectorRef, _dir, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, ngControl) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-chip-list';\n        /**\n         * When a chip is destroyed, we store the index of the destroyed chip until the chips\n         * query list notifies about the update. This is necessary because we cannot determine an\n         * appropriate chip that should receive focus until the array of chips updated completely.\n         */\n        this._lastDestroyedChipIndex = null;\n        /** Subject that emits when the component has been destroyed. */\n        this._destroyed = new Subject();\n        /** Uid of the chip list */\n        this._uid = `mat-chip-list-${nextUniqueId$1++}`;\n        /** Tab index for the chip list. */\n        this._tabIndex = 0;\n        /**\n         * User defined tab index.\n         * When it is not null, use user defined tab index. Otherwise use _tabIndex\n         */\n        this._userTabIndex = null;\n        /** Function when touched */\n        this._onTouched = () => { };\n        /** Function when changed */\n        this._onChange = () => { };\n        this._multiple = false;\n        this._compareWith = (o1, o2) => o1 === o2;\n        this._disabled = false;\n        /** Orientation of the chip list. */\n        this.ariaOrientation = 'horizontal';\n        this._selectable = true;\n        /** Event emitted when the selected chip list value has been changed by the user. */\n        this.change = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            this.ngControl.valueAccessor = this;\n        }\n    }\n    /** The array of selected chips inside chip list. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The ARIA role applied to the chip list. */\n    get role() {\n        return this.empty ? null : 'listbox';\n    }\n    /** Whether the user should be allowed to select multiple chips. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        this._multiple = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * A function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        this.writeValue(value);\n        this._value = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._chipInput ? this._chipInput.id : this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get placeholder() {\n        return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n    get focused() {\n        return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._chipInput || this._chipInput.empty) && (!this.chips || this.chips.length === 0);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return !this.empty || this.focused;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this.ngControl ? !!this.ngControl.disabled : this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._syncChipsState();\n    }\n    /**\n     * Whether or not this chip list is selectable. When a chip list is not selectable,\n     * the selected states for all the chips inside the chip list are always ignored.\n     */\n    get selectable() {\n        return this._selectable;\n    }\n    set selectable(value) {\n        this._selectable = coerceBooleanProperty(value);\n        if (this.chips) {\n            this.chips.forEach(chip => (chip.chipListSelectable = this._selectable));\n        }\n    }\n    set tabIndex(value) {\n        this._userTabIndex = value;\n        this._tabIndex = value;\n    }\n    /** Combined stream of all of the child chips' selection change events. */\n    get chipSelectionChanges() {\n        return merge(...this.chips.map(chip => chip.selectionChange));\n    }\n    /** Combined stream of all of the child chips' focus change events. */\n    get chipFocusChanges() {\n        return merge(...this.chips.map(chip => chip._onFocus));\n    }\n    /** Combined stream of all of the child chips' blur change events. */\n    get chipBlurChanges() {\n        return merge(...this.chips.map(chip => chip._onBlur));\n    }\n    /** Combined stream of all of the child chips' remove change events. */\n    get chipRemoveChanges() {\n        return merge(...this.chips.map(chip => chip.destroyed));\n    }\n    ngAfterContentInit() {\n        this._keyManager = new FocusKeyManager(this.chips)\n            .withWrap()\n            .withVerticalOrientation()\n            .withHomeAndEnd()\n            .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n        if (this._dir) {\n            this._dir.change\n                .pipe(takeUntil(this._destroyed))\n                .subscribe(dir => this._keyManager.withHorizontalOrientation(dir));\n        }\n        this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n            this._allowFocusEscape();\n        });\n        // When the list changes, re-subscribe\n        this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n            if (this.disabled) {\n                // Since this happens after the content has been\n                // checked, we need to defer it to the next tick.\n                Promise.resolve().then(() => {\n                    this._syncChipsState();\n                });\n            }\n            this._resetChips();\n            // Reset chips selected/deselected status\n            this._initializeSelection();\n            // Check to see if we need to update our tab index\n            this._updateTabIndex();\n            // Check to see if we have a destroyed chip and need to refocus\n            this._updateFocusForDestroyedChips();\n            this.stateChanges.next();\n        });\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple, undefined, false);\n        this.stateChanges.next();\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            if (this.ngControl.disabled !== this._disabled) {\n                this.disabled = !!this.ngControl.disabled;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n        this.stateChanges.complete();\n        this._dropSubscriptions();\n    }\n    /** Associates an HTML input element with this chip list. */\n    registerInput(inputElement) {\n        this._chipInput = inputElement;\n        // We use this attribute to match the chip list to its input in test harnesses.\n        // Set the attribute directly here to avoid \"changed after checked\" errors.\n        this._elementRef.nativeElement.setAttribute('data-mat-chip-input', inputElement.id);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        if (this.chips) {\n            this._setSelectionByValue(value, false);\n        }\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.stateChanges.next();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick(event) {\n        if (!this._originatesFromChip(event)) {\n            this.focus();\n        }\n    }\n    /**\n     * Focuses the first non-disabled chip in this chip list, or the associated input when there\n     * are no eligible chips.\n     */\n    focus(options) {\n        if (this.disabled) {\n            return;\n        }\n        // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n        // Focus on first element if there's no chipInput inside chip-list\n        if (this._chipInput && this._chipInput.focused) {\n            // do nothing\n        }\n        else if (this.chips.length > 0) {\n            this._keyManager.setFirstItemActive();\n            this.stateChanges.next();\n        }\n        else {\n            this._focusInput(options);\n            this.stateChanges.next();\n        }\n    }\n    /** Attempt to focus an input if we have one. */\n    _focusInput(options) {\n        if (this._chipInput) {\n            this._chipInput.focus(options);\n        }\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keydown(event) {\n        const target = event.target;\n        if (target && target.classList.contains('mat-chip')) {\n            this._keyManager.onKeydown(event);\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Check the tab index as you should not be allowed to focus an empty list.\n     */\n    _updateTabIndex() {\n        // If we have 0 chips, we should not allow keyboard focus\n        this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n    }\n    /**\n     * If the amount of chips changed, we need to update the\n     * key manager state and focus the next closest chip.\n     */\n    _updateFocusForDestroyedChips() {\n        // Move focus to the closest chip. If no other chips remain, focus the chip-list itself.\n        if (this._lastDestroyedChipIndex != null) {\n            if (this.chips.length) {\n                const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n                this._keyManager.setActiveItem(newChipIndex);\n            }\n            else {\n                this.focus();\n            }\n        }\n        this._lastDestroyedChipIndex = null;\n    }\n    /**\n     * Utility to ensure all indexes are valid.\n     *\n     * @param index The index to be checked.\n     * @returns True if the index is valid for our list of chips.\n     */\n    _isValidIndex(index) {\n        return index >= 0 && index < this.chips.length;\n    }\n    _setSelectionByValue(value, isUserInput = true) {\n        this._clearSelection();\n        this.chips.forEach(chip => chip.deselect());\n        if (Array.isArray(value)) {\n            value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n            this._sortValues();\n        }\n        else {\n            const correspondingChip = this._selectValue(value, isUserInput);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what chip the user interacted with last.\n            if (correspondingChip) {\n                if (isUserInput) {\n                    this._keyManager.setActiveItem(correspondingChip);\n                }\n            }\n        }\n    }\n    /**\n     * Finds and selects the chip based on its value.\n     * @returns Chip that has the corresponding value.\n     */\n    _selectValue(value, isUserInput = true) {\n        const correspondingChip = this.chips.find(chip => {\n            return chip.value != null && this._compareWith(chip.value, value);\n        });\n        if (correspondingChip) {\n            isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n            this._selectionModel.select(correspondingChip);\n        }\n        return correspondingChip;\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl || this._value) {\n                this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n                this.stateChanges.next();\n            }\n        });\n    }\n    /**\n     * Deselects every chip in the list.\n     * @param skip Chip that should not be deselected.\n     */\n    _clearSelection(skip) {\n        this._selectionModel.clear();\n        this.chips.forEach(chip => {\n            if (chip !== skip) {\n                chip.deselect();\n            }\n        });\n        this.stateChanges.next();\n    }\n    /**\n     * Sorts the model values, ensuring that they keep the same\n     * order that they have in the panel.\n     */\n    _sortValues() {\n        if (this._multiple) {\n            this._selectionModel.clear();\n            this.chips.forEach(chip => {\n                if (chip.selected) {\n                    this._selectionModel.select(chip);\n                }\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (Array.isArray(this.selected)) {\n            valueToEmit = this.selected.map(chip => chip.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.change.emit(new MatChipListChange(this, valueToEmit));\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** When blurred, mark the field as touched when focus moved outside the chip list. */\n    _blur() {\n        if (!this._hasFocusedChip()) {\n            this._keyManager.setActiveItem(-1);\n        }\n        if (!this.disabled) {\n            if (this._chipInput) {\n                // If there's a chip input, we should check whether the focus moved to chip input.\n                // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n                // to chip input, do nothing.\n                // Timeout is needed to wait for the focus() event trigger on chip input.\n                setTimeout(() => {\n                    if (!this.focused) {\n                        this._markAsTouched();\n                    }\n                });\n            }\n            else {\n                // If there's no chip input, then mark the field as touched.\n                this._markAsTouched();\n            }\n        }\n    }\n    /** Mark the field as touched */\n    _markAsTouched() {\n        this._onTouched();\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /**\n     * Removes the `tabindex` from the chip list and resets it back afterwards, allowing the\n     * user to tab out of it. This prevents the list from capturing focus and redirecting\n     * it back to the first chip, creating a focus trap, if it user tries to tab away.\n     */\n    _allowFocusEscape() {\n        if (this._tabIndex !== -1) {\n            this._tabIndex = -1;\n            setTimeout(() => {\n                this._tabIndex = this._userTabIndex || 0;\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    _resetChips() {\n        this._dropSubscriptions();\n        this._listenToChipsFocus();\n        this._listenToChipsSelection();\n        this._listenToChipsRemoved();\n    }\n    _dropSubscriptions() {\n        if (this._chipFocusSubscription) {\n            this._chipFocusSubscription.unsubscribe();\n            this._chipFocusSubscription = null;\n        }\n        if (this._chipBlurSubscription) {\n            this._chipBlurSubscription.unsubscribe();\n            this._chipBlurSubscription = null;\n        }\n        if (this._chipSelectionSubscription) {\n            this._chipSelectionSubscription.unsubscribe();\n            this._chipSelectionSubscription = null;\n        }\n        if (this._chipRemoveSubscription) {\n            this._chipRemoveSubscription.unsubscribe();\n            this._chipRemoveSubscription = null;\n        }\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsSelection() {\n        this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n            event.source.selected\n                ? this._selectionModel.select(event.source)\n                : this._selectionModel.deselect(event.source);\n            // For single selection chip list, make sure the deselected value is unselected.\n            if (!this.multiple) {\n                this.chips.forEach(chip => {\n                    if (!this._selectionModel.isSelected(chip) && chip.selected) {\n                        chip.deselect();\n                    }\n                });\n            }\n            if (event.isUserInput) {\n                this._propagateChanges();\n            }\n        });\n    }\n    /** Listens to user-generated selection events on each chip. */\n    _listenToChipsFocus() {\n        this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n            let chipIndex = this.chips.toArray().indexOf(event.chip);\n            if (this._isValidIndex(chipIndex)) {\n                this._keyManager.updateActiveItem(chipIndex);\n            }\n            this.stateChanges.next();\n        });\n        this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n            this._blur();\n            this.stateChanges.next();\n        });\n    }\n    _listenToChipsRemoved() {\n        this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n            const chip = event.chip;\n            const chipIndex = this.chips.toArray().indexOf(event.chip);\n            // In case the chip that will be removed is currently focused, we temporarily store\n            // the index in order to be able to determine an appropriate sibling chip that will\n            // receive focus.\n            if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n                this._lastDestroyedChipIndex = chipIndex;\n            }\n        });\n    }\n    /** Checks whether an event comes from inside a chip element. */\n    _originatesFromChip(event) {\n        let currentElement = event.target;\n        while (currentElement && currentElement !== this._elementRef.nativeElement) {\n            if (currentElement.classList.contains('mat-chip')) {\n                return true;\n            }\n            currentElement = currentElement.parentElement;\n        }\n        return false;\n    }\n    /** Checks whether any of the chips is focused. */\n    _hasFocusedChip() {\n        return this.chips && this.chips.some(chip => chip._hasFocus);\n    }\n    /** Syncs the list's state with the individual chips. */\n    _syncChipsState() {\n        if (this.chips) {\n            this.chips.forEach(chip => {\n                chip._chipListDisabled = this._disabled;\n                chip._chipListMultiple = this.multiple;\n            });\n        }\n    }\n}\nMatChipList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipList, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1$1.Directionality, optional: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: i2.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });\nMatChipList.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatChipList, selector: \"mat-chip-list\", inputs: { errorStateMatcher: \"errorStateMatcher\", multiple: \"multiple\", compareWith: \"compareWith\", value: \"value\", required: \"required\", placeholder: \"placeholder\", disabled: \"disabled\", ariaOrientation: [\"aria-orientation\", \"ariaOrientation\"], selectable: \"selectable\", tabIndex: \"tabIndex\" }, outputs: { change: \"change\", valueChange: \"valueChange\" }, host: { listeners: { \"focus\": \"focus()\", \"blur\": \"_blur()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.tabindex\": \"disabled ? null : _tabIndex\", \"attr.aria-describedby\": \"_ariaDescribedby || null\", \"attr.aria-required\": \"role ? required : null\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-multiselectable\": \"multiple\", \"attr.role\": \"role\", \"class.mat-chip-list-disabled\": \"disabled\", \"class.mat-chip-list-invalid\": \"errorState\", \"class.mat-chip-list-required\": \"required\", \"attr.aria-orientation\": \"ariaOrientation\", \"id\": \"_uid\" }, classAttribute: \"mat-chip-list\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }], queries: [{ propertyName: \"chips\", predicate: MatChip, descendants: true }], exportAs: [\"matChipList\"], usesInheritance: true, ngImport: i0, template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, isInline: true, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipList, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-chip-list', template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`, exportAs: 'matChipList', host: {\n                        '[attr.tabindex]': 'disabled ? null : _tabIndex',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-required]': 'role ? required : null',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-multiselectable]': 'multiple',\n                        '[attr.role]': 'role',\n                        '[class.mat-chip-list-disabled]': 'disabled',\n                        '[class.mat-chip-list-invalid]': 'errorState',\n                        '[class.mat-chip-list-required]': 'required',\n                        '[attr.aria-orientation]': 'ariaOrientation',\n                        'class': 'mat-chip-list',\n                        '(focus)': 'focus()',\n                        '(blur)': '_blur()',\n                        '(keydown)': '_keydown($event)',\n                        '[id]': '_uid',\n                    }, providers: [{ provide: MatFormFieldControl, useExisting: MatChipList }], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-chip{position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;transform:translateZ(0);border:none;-webkit-appearance:none;-moz-appearance:none}.mat-standard-chip{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);display:inline-flex;padding:7px 12px;border-radius:16px;align-items:center;cursor:default;min-height:32px;height:1px}._mat-animation-noopable.mat-standard-chip{transition:none;animation:none}.mat-standard-chip .mat-chip-remove{border:none;-webkit-appearance:none;-moz-appearance:none;padding:0;background:none}.mat-standard-chip .mat-chip-remove.mat-icon,.mat-standard-chip .mat-chip-remove .mat-icon{width:18px;height:18px;font-size:18px}.mat-standard-chip::after{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:inherit;opacity:0;content:\\\"\\\";pointer-events:none;transition:opacity 200ms cubic-bezier(0.35, 0, 0.25, 1)}.mat-standard-chip:hover::after{opacity:.12}.mat-standard-chip:focus{outline:none}.mat-standard-chip:focus::after{opacity:.16}.cdk-high-contrast-active .mat-standard-chip{outline:solid 1px}.cdk-high-contrast-active .mat-standard-chip:focus{outline:dotted 2px}.mat-standard-chip.mat-chip-disabled::after{opacity:0}.mat-standard-chip.mat-chip-disabled .mat-chip-remove,.mat-standard-chip.mat-chip-disabled .mat-chip-trailing-icon{cursor:default}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar,.mat-standard-chip.mat-chip-with-avatar{padding-top:0;padding-bottom:0}.mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-right:8px;padding-left:0}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon.mat-chip-with-avatar{padding-left:8px;padding-right:0}.mat-standard-chip.mat-chip-with-trailing-icon{padding-top:7px;padding-bottom:7px;padding-right:8px;padding-left:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-trailing-icon{padding-left:8px;padding-right:12px}.mat-standard-chip.mat-chip-with-avatar{padding-left:0;padding-right:12px}[dir=rtl] .mat-standard-chip.mat-chip-with-avatar{padding-right:0;padding-left:12px}.mat-standard-chip .mat-chip-avatar{width:24px;height:24px;margin-right:8px;margin-left:4px}[dir=rtl] .mat-standard-chip .mat-chip-avatar{margin-left:8px;margin-right:4px}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{width:18px;height:18px;cursor:pointer}.mat-standard-chip .mat-chip-remove,.mat-standard-chip .mat-chip-trailing-icon{margin-left:8px;margin-right:0}[dir=rtl] .mat-standard-chip .mat-chip-remove,[dir=rtl] .mat-standard-chip .mat-chip-trailing-icon{margin-right:8px;margin-left:0}.mat-chip-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:inherit;overflow:hidden}.mat-chip-list-wrapper{display:flex;flex-direction:row;flex-wrap:wrap;align-items:center;margin:-4px}.mat-chip-list-wrapper input.mat-input-element,.mat-chip-list-wrapper .mat-standard-chip{margin:4px}.mat-chip-list-stacked .mat-chip-list-wrapper{flex-direction:column;align-items:flex-start}.mat-chip-list-stacked .mat-chip-list-wrapper .mat-standard-chip{width:100%}.mat-chip-avatar{border-radius:50%;justify-content:center;align-items:center;display:flex;overflow:hidden;object-fit:cover}input.mat-chip-input{width:150px;margin:4px;flex:1 0 150px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }]; }, propDecorators: { errorStateMatcher: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], ariaOrientation: [{\n                type: Input,\n                args: ['aria-orientation']\n            }], selectable: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }], chips: [{\n                type: ContentChildren,\n                args: [MatChip, {\n                        // We need to use `descendants: true`, because Ivy will no longer match\n                        // indirect descendants if it's left as false.\n                        descendants: true,\n                    }]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\nclass MatChipInput {\n    constructor(_elementRef, _defaultOptions) {\n        this._elementRef = _elementRef;\n        this._defaultOptions = _defaultOptions;\n        /** Whether the control is focused. */\n        this.focused = false;\n        this._addOnBlur = false;\n        /**\n         * The list of key codes that will trigger a chipEnd event.\n         *\n         * Defaults to `[ENTER]`.\n         */\n        this.separatorKeyCodes = this._defaultOptions.separatorKeyCodes;\n        /** Emitted when a chip is to be added. */\n        this.chipEnd = new EventEmitter();\n        /** The input's placeholder text. */\n        this.placeholder = '';\n        /** Unique id for the input. */\n        this.id = `mat-chip-list-input-${nextUniqueId++}`;\n        this._disabled = false;\n        this.inputElement = this._elementRef.nativeElement;\n    }\n    /** Register input for chip list */\n    set chipList(value) {\n        if (value) {\n            this._chipList = value;\n            this._chipList.registerInput(this);\n        }\n    }\n    /**\n     * Whether or not the chipEnd event will be emitted when the input is blurred.\n     */\n    get addOnBlur() {\n        return this._addOnBlur;\n    }\n    set addOnBlur(value) {\n        this._addOnBlur = coerceBooleanProperty(value);\n    }\n    /** Whether the input is disabled. */\n    get disabled() {\n        return this._disabled || (this._chipList && this._chipList.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    /** Whether the input is empty. */\n    get empty() {\n        return !this.inputElement.value;\n    }\n    ngOnChanges() {\n        this._chipList.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.chipEnd.complete();\n    }\n    ngAfterContentInit() {\n        this._focusLastChipOnBackspace = this.empty;\n    }\n    /** Utility method to make host definition/tests more clear. */\n    _keydown(event) {\n        if (event) {\n            // Allow the user's focus to escape when they're tabbing forward. Note that we don't\n            // want to do this when going backwards, because focus should go back to the first chip.\n            if (event.keyCode === TAB && !hasModifierKey(event, 'shiftKey')) {\n                this._chipList._allowFocusEscape();\n            }\n            // To prevent the user from accidentally deleting chips when pressing BACKSPACE continuously,\n            // We focus the last chip on backspace only after the user has released the backspace button,\n            // and the input is empty (see behaviour in _keyup)\n            if (event.keyCode === BACKSPACE && this._focusLastChipOnBackspace) {\n                this._chipList._keyManager.setLastItemActive();\n                event.preventDefault();\n                return;\n            }\n            else {\n                this._focusLastChipOnBackspace = false;\n            }\n        }\n        this._emitChipEnd(event);\n    }\n    /**\n     * Pass events to the keyboard manager. Available here for tests.\n     */\n    _keyup(event) {\n        // Allow user to move focus to chips next time he presses backspace\n        if (!this._focusLastChipOnBackspace && event.keyCode === BACKSPACE && this.empty) {\n            this._focusLastChipOnBackspace = true;\n            event.preventDefault();\n        }\n    }\n    /** Checks to see if the blur should emit the (chipEnd) event. */\n    _blur() {\n        if (this.addOnBlur) {\n            this._emitChipEnd();\n        }\n        this.focused = false;\n        // Blur the chip list if it is not focused\n        if (!this._chipList.focused) {\n            this._chipList._blur();\n        }\n        this._chipList.stateChanges.next();\n    }\n    _focus() {\n        this.focused = true;\n        this._focusLastChipOnBackspace = this.empty;\n        this._chipList.stateChanges.next();\n    }\n    /** Checks to see if the (chipEnd) event needs to be emitted. */\n    _emitChipEnd(event) {\n        if (!this.inputElement.value && !!event) {\n            this._chipList._keydown(event);\n        }\n        if (!event || this._isSeparatorKey(event)) {\n            this.chipEnd.emit({\n                input: this.inputElement,\n                value: this.inputElement.value,\n                chipInput: this,\n            });\n            event?.preventDefault();\n        }\n    }\n    _onInput() {\n        // Let chip list know whenever the value changes.\n        this._chipList.stateChanges.next();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this.inputElement.focus(options);\n    }\n    /** Clears the input */\n    clear() {\n        this.inputElement.value = '';\n        this._focusLastChipOnBackspace = true;\n    }\n    /** Checks whether a keycode is one of the configured separators. */\n    _isSeparatorKey(event) {\n        return !hasModifierKey(event) && new Set(this.separatorKeyCodes).has(event.keyCode);\n    }\n}\nMatChipInput.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipInput, deps: [{ token: i0.ElementRef }, { token: MAT_CHIPS_DEFAULT_OPTIONS }], target: i0.ɵɵFactoryTarget.Directive });\nMatChipInput.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", type: MatChipInput, selector: \"input[matChipInputFor]\", inputs: { chipList: [\"matChipInputFor\", \"chipList\"], addOnBlur: [\"matChipInputAddOnBlur\", \"addOnBlur\"], separatorKeyCodes: [\"matChipInputSeparatorKeyCodes\", \"separatorKeyCodes\"], placeholder: \"placeholder\", id: \"id\", disabled: \"disabled\" }, outputs: { chipEnd: \"matChipInputTokenEnd\" }, host: { listeners: { \"keydown\": \"_keydown($event)\", \"keyup\": \"_keyup($event)\", \"blur\": \"_blur()\", \"focus\": \"_focus()\", \"input\": \"_onInput()\" }, properties: { \"id\": \"id\", \"attr.disabled\": \"disabled || null\", \"attr.placeholder\": \"placeholder || null\", \"attr.aria-invalid\": \"_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null\", \"attr.aria-required\": \"_chipList && _chipList.required || null\" }, classAttribute: \"mat-chip-input mat-input-element\" }, exportAs: [\"matChipInput\", \"matChipInputFor\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[matChipInputFor]',\n                    exportAs: 'matChipInput, matChipInputFor',\n                    host: {\n                        'class': 'mat-chip-input mat-input-element',\n                        '(keydown)': '_keydown($event)',\n                        '(keyup)': '_keyup($event)',\n                        '(blur)': '_blur()',\n                        '(focus)': '_focus()',\n                        '(input)': '_onInput()',\n                        '[id]': 'id',\n                        '[attr.disabled]': 'disabled || null',\n                        '[attr.placeholder]': 'placeholder || null',\n                        '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n                        '[attr.aria-required]': '_chipList && _chipList.required || null',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_CHIPS_DEFAULT_OPTIONS]\n                }] }]; }, propDecorators: { chipList: [{\n                type: Input,\n                args: ['matChipInputFor']\n            }], addOnBlur: [{\n                type: Input,\n                args: ['matChipInputAddOnBlur']\n            }], separatorKeyCodes: [{\n                type: Input,\n                args: ['matChipInputSeparatorKeyCodes']\n            }], chipEnd: [{\n                type: Output,\n                args: ['matChipInputTokenEnd']\n            }], placeholder: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst CHIP_DECLARATIONS = [\n    MatChipList,\n    MatChip,\n    MatChipInput,\n    MatChipRemove,\n    MatChipAvatar,\n    MatChipTrailingIcon,\n];\nclass MatChipsModule {\n}\nMatChipsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatChipsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipsModule, declarations: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon], imports: [MatCommonModule], exports: [MatChipList,\n        MatChip,\n        MatChipInput,\n        MatChipRemove,\n        MatChipAvatar,\n        MatChipTrailingIcon] });\nMatChipsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipsModule, providers: [\n        ErrorStateMatcher,\n        {\n            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n            useValue: {\n                separatorKeyCodes: [ENTER],\n            },\n        },\n    ], imports: [[MatCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0-rc.3\", ngImport: i0, type: MatChipsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule],\n                    exports: CHIP_DECLARATIONS,\n                    declarations: CHIP_DECLARATIONS,\n                    providers: [\n                        ErrorStateMatcher,\n                        {\n                            provide: MAT_CHIPS_DEFAULT_OPTIONS,\n                            useValue: {\n                                separatorKeyCodes: [ENTER],\n                            },\n                        },\n                    ],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHIPS_DEFAULT_OPTIONS, MAT_CHIP_AVATAR, MAT_CHIP_REMOVE, MAT_CHIP_TRAILING_ICON, MatChip, MatChipAvatar, MatChipInput, MatChipList, MatChipListChange, MatChipRemove, MatChipSelectionChange, MatChipTrailingIcon, MatChipsModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}